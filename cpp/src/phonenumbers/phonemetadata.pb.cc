// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phonemetadata.proto

#include "phonemetadata.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace i18n {
namespace phonenumbers {

inline constexpr PhoneNumberDesc::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        possible_length_{},
        possible_length_local_only_{},
        national_number_pattern_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        example_number_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR PhoneNumberDesc::PhoneNumberDesc(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PhoneNumberDescDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhoneNumberDescDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhoneNumberDescDefaultTypeInternal() {}
  union {
    PhoneNumberDesc _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhoneNumberDescDefaultTypeInternal _PhoneNumberDesc_default_instance_;

inline constexpr NumberFormat::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        leading_digits_pattern_{},
        pattern_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        format_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        national_prefix_formatting_rule_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        domestic_carrier_code_formatting_rule_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        national_prefix_optional_when_formatting_{false} {}

template <typename>
PROTOBUF_CONSTEXPR NumberFormat::NumberFormat(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NumberFormatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumberFormatDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumberFormatDefaultTypeInternal() {}
  union {
    NumberFormat _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumberFormatDefaultTypeInternal _NumberFormat_default_instance_;

inline constexpr PhoneMetadata::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        number_format_{},
        intl_number_format_{},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        international_prefix_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        national_prefix_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        preferred_extn_prefix_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        national_prefix_for_parsing_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        national_prefix_transform_rule_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        preferred_international_prefix_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        leading_digits_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        general_desc_{nullptr},
        fixed_line_{nullptr},
        mobile_{nullptr},
        toll_free_{nullptr},
        premium_rate_{nullptr},
        shared_cost_{nullptr},
        personal_number_{nullptr},
        voip_{nullptr},
        pager_{nullptr},
        no_international_dialling_{nullptr},
        uan_{nullptr},
        emergency_{nullptr},
        voicemail_{nullptr},
        short_code_{nullptr},
        standard_rate_{nullptr},
        carrier_specific_{nullptr},
        sms_services_{nullptr},
        country_code_{0},
        same_mobile_and_fixed_line_pattern_{false},
        main_country_for_code_{false},
        mobile_number_portable_region_{false} {}

template <typename>
PROTOBUF_CONSTEXPR PhoneMetadata::PhoneMetadata(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PhoneMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhoneMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhoneMetadataDefaultTypeInternal() {}
  union {
    PhoneMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhoneMetadataDefaultTypeInternal _PhoneMetadata_default_instance_;

inline constexpr PhoneMetadataCollection::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : metadata_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PhoneMetadataCollection::PhoneMetadataCollection(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PhoneMetadataCollectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhoneMetadataCollectionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhoneMetadataCollectionDefaultTypeInternal() {}
  union {
    PhoneMetadataCollection _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhoneMetadataCollectionDefaultTypeInternal _PhoneMetadataCollection_default_instance_;
}  // namespace phonenumbers
}  // namespace i18n
namespace i18n {
namespace phonenumbers {
// ===================================================================

class NumberFormat::_Internal {
 public:
  using HasBits = decltype(std::declval<NumberFormat>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NumberFormat, _impl_._has_bits_);
  static void set_has_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_national_prefix_formatting_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_national_prefix_optional_when_formatting(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_domestic_carrier_code_formatting_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

NumberFormat::NumberFormat(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:i18n.phonenumbers.NumberFormat)
}
inline PROTOBUF_NDEBUG_INLINE NumberFormat::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        leading_digits_pattern_{visibility, arena, from.leading_digits_pattern_},
        pattern_(arena, from.pattern_),
        format_(arena, from.format_),
        national_prefix_formatting_rule_(arena, from.national_prefix_formatting_rule_),
        domestic_carrier_code_formatting_rule_(arena, from.domestic_carrier_code_formatting_rule_) {}

NumberFormat::NumberFormat(
    ::google::protobuf::Arena* arena,
    const NumberFormat& from)
    : ::google::protobuf::MessageLite(arena) {
  NumberFormat* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.national_prefix_optional_when_formatting_ = from._impl_.national_prefix_optional_when_formatting_;

  // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.NumberFormat)
}
inline PROTOBUF_NDEBUG_INLINE NumberFormat::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        leading_digits_pattern_{visibility, arena},
        pattern_(arena),
        format_(arena),
        national_prefix_formatting_rule_(arena),
        domestic_carrier_code_formatting_rule_(arena) {}

inline void NumberFormat::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.national_prefix_optional_when_formatting_ = {};
}
NumberFormat::~NumberFormat() {
  // @@protoc_insertion_point(destructor:i18n.phonenumbers.NumberFormat)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void NumberFormat::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.pattern_.Destroy();
  _impl_.format_.Destroy();
  _impl_.national_prefix_formatting_rule_.Destroy();
  _impl_.domestic_carrier_code_formatting_rule_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void NumberFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.NumberFormat)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.leading_digits_pattern_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.national_prefix_formatting_rule_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.domestic_carrier_code_formatting_rule_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.national_prefix_optional_when_formatting_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NumberFormat::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> NumberFormat::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NumberFormat, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NumberFormat_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required string pattern = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(NumberFormat, _impl_.pattern_)}},
    // required string format = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(NumberFormat, _impl_.format_)}},
    // repeated string leading_digits_pattern = 3;
    {::_pbi::TcParser::FastBR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(NumberFormat, _impl_.leading_digits_pattern_)}},
    // optional string national_prefix_formatting_rule = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(NumberFormat, _impl_.national_prefix_formatting_rule_)}},
    // optional string domestic_carrier_code_formatting_rule = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 3, 0, PROTOBUF_FIELD_OFFSET(NumberFormat, _impl_.domestic_carrier_code_formatting_rule_)}},
    // optional bool national_prefix_optional_when_formatting = 6 [default = false];
    {::_pbi::TcParser::FastV8S1,
     {48, 4, 0, PROTOBUF_FIELD_OFFSET(NumberFormat, _impl_.national_prefix_optional_when_formatting_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required string pattern = 1;
    {PROTOBUF_FIELD_OFFSET(NumberFormat, _impl_.pattern_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // required string format = 2;
    {PROTOBUF_FIELD_OFFSET(NumberFormat, _impl_.format_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated string leading_digits_pattern = 3;
    {PROTOBUF_FIELD_OFFSET(NumberFormat, _impl_.leading_digits_pattern_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // optional string national_prefix_formatting_rule = 4;
    {PROTOBUF_FIELD_OFFSET(NumberFormat, _impl_.national_prefix_formatting_rule_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string domestic_carrier_code_formatting_rule = 5;
    {PROTOBUF_FIELD_OFFSET(NumberFormat, _impl_.domestic_carrier_code_formatting_rule_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bool national_prefix_optional_when_formatting = 6 [default = false];
    {PROTOBUF_FIELD_OFFSET(NumberFormat, _impl_.national_prefix_optional_when_formatting_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* NumberFormat::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:i18n.phonenumbers.NumberFormat)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string pattern = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_pattern();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // required string format = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_format();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated string leading_digits_pattern = 3;
  for (int i = 0, n = this->_internal_leading_digits_pattern_size(); i < n; ++i) {
    const auto& s = this->_internal_leading_digits_pattern().Get(i);
    target = stream->WriteString(3, s, target);
  }

  // optional string national_prefix_formatting_rule = 4;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_national_prefix_formatting_rule();
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string domestic_carrier_code_formatting_rule = 5;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_domestic_carrier_code_formatting_rule();
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional bool national_prefix_optional_when_formatting = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_national_prefix_optional_when_formatting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:i18n.phonenumbers.NumberFormat)
  return target;
}

::size_t NumberFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.NumberFormat)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string leading_digits_pattern = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_leading_digits_pattern().size());
  for (int i = 0, n = _internal_leading_digits_pattern().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_leading_digits_pattern().Get(i));
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // required string pattern = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_pattern());
    }

    // required string format = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_format());
    }

  }
  if (cached_has_bits & 0x0000001cu) {
    // optional string national_prefix_formatting_rule = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_national_prefix_formatting_rule());
    }

    // optional string domestic_carrier_code_formatting_rule = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_domestic_carrier_code_formatting_rule());
    }

    // optional bool national_prefix_optional_when_formatting = 6 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void NumberFormat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NumberFormat*>(
      &from));
}

void NumberFormat::MergeFrom(const NumberFormat& from) {
  NumberFormat* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.NumberFormat)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_leading_digits_pattern()->MergeFrom(from._internal_leading_digits_pattern());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_pattern(from._internal_pattern());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_format(from._internal_format());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_national_prefix_formatting_rule(from._internal_national_prefix_formatting_rule());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_domestic_carrier_code_formatting_rule(from._internal_domestic_carrier_code_formatting_rule());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.national_prefix_optional_when_formatting_ = from._impl_.national_prefix_optional_when_formatting_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NumberFormat::CopyFrom(const NumberFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.NumberFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NumberFormat::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

::_pbi::CachedSize* NumberFormat::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void NumberFormat::InternalSwap(NumberFormat* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.leading_digits_pattern_.InternalSwap(&other->_impl_.leading_digits_pattern_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pattern_, &other->_impl_.pattern_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.format_, &other->_impl_.format_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.national_prefix_formatting_rule_, &other->_impl_.national_prefix_formatting_rule_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.domestic_carrier_code_formatting_rule_, &other->_impl_.domestic_carrier_code_formatting_rule_, arena);
        swap(_impl_.national_prefix_optional_when_formatting_, other->_impl_.national_prefix_optional_when_formatting_);
}

std::string NumberFormat::GetTypeName() const {
  return "i18n.phonenumbers.NumberFormat";
}

// ===================================================================

class PhoneNumberDesc::_Internal {
 public:
  using HasBits = decltype(std::declval<PhoneNumberDesc>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PhoneNumberDesc, _impl_._has_bits_);
  static void set_has_national_number_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_example_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PhoneNumberDesc::PhoneNumberDesc(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:i18n.phonenumbers.PhoneNumberDesc)
}
inline PROTOBUF_NDEBUG_INLINE PhoneNumberDesc::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        possible_length_{visibility, arena, from.possible_length_},
        possible_length_local_only_{visibility, arena, from.possible_length_local_only_},
        national_number_pattern_(arena, from.national_number_pattern_),
        example_number_(arena, from.example_number_) {}

PhoneNumberDesc::PhoneNumberDesc(
    ::google::protobuf::Arena* arena,
    const PhoneNumberDesc& from)
    : ::google::protobuf::MessageLite(arena) {
  PhoneNumberDesc* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.PhoneNumberDesc)
}
inline PROTOBUF_NDEBUG_INLINE PhoneNumberDesc::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        possible_length_{visibility, arena},
        possible_length_local_only_{visibility, arena},
        national_number_pattern_(arena),
        example_number_(arena) {}

inline void PhoneNumberDesc::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PhoneNumberDesc::~PhoneNumberDesc() {
  // @@protoc_insertion_point(destructor:i18n.phonenumbers.PhoneNumberDesc)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void PhoneNumberDesc::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.national_number_pattern_.Destroy();
  _impl_.example_number_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PhoneNumberDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.PhoneNumberDesc)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.possible_length_.Clear();
  _impl_.possible_length_local_only_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.national_number_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.example_number_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PhoneNumberDesc::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 0, 0, 2> PhoneNumberDesc::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PhoneNumberDesc, _impl_._has_bits_),
    0, // no _extensions_
    10, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966493,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PhoneNumberDesc_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated int32 possible_length = 9;
    {::_pbi::TcParser::FastV32R1,
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(PhoneNumberDesc, _impl_.possible_length_)}},
    // optional string national_number_pattern = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(PhoneNumberDesc, _impl_.national_number_pattern_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional string example_number = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 1, 0, PROTOBUF_FIELD_OFFSET(PhoneNumberDesc, _impl_.example_number_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string national_number_pattern = 2;
    {PROTOBUF_FIELD_OFFSET(PhoneNumberDesc, _impl_.national_number_pattern_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string example_number = 6;
    {PROTOBUF_FIELD_OFFSET(PhoneNumberDesc, _impl_.example_number_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated int32 possible_length = 9;
    {PROTOBUF_FIELD_OFFSET(PhoneNumberDesc, _impl_.possible_length_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kInt32)},
    // repeated int32 possible_length_local_only = 10;
    {PROTOBUF_FIELD_OFFSET(PhoneNumberDesc, _impl_.possible_length_local_only_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* PhoneNumberDesc::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:i18n.phonenumbers.PhoneNumberDesc)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string national_number_pattern = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_national_number_pattern();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string example_number = 6;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_example_number();
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // repeated int32 possible_length = 9;
  for (int i = 0, n = this->_internal_possible_length_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        9, this->_internal_possible_length().Get(i), target);
  }

  // repeated int32 possible_length_local_only = 10;
  for (int i = 0, n = this->_internal_possible_length_local_only_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        10, this->_internal_possible_length_local_only().Get(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:i18n.phonenumbers.PhoneNumberDesc)
  return target;
}

::size_t PhoneNumberDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.PhoneNumberDesc)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 possible_length = 9;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_possible_length())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_possible_length_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 possible_length_local_only = 10;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_possible_length_local_only())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_possible_length_local_only_size());
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string national_number_pattern = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_national_number_pattern());
    }

    // optional string example_number = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_example_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void PhoneNumberDesc::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PhoneNumberDesc*>(
      &from));
}

void PhoneNumberDesc::MergeFrom(const PhoneNumberDesc& from) {
  PhoneNumberDesc* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.PhoneNumberDesc)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_possible_length()->MergeFrom(from._internal_possible_length());
  _this->_internal_mutable_possible_length_local_only()->MergeFrom(from._internal_possible_length_local_only());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_national_number_pattern(from._internal_national_number_pattern());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_example_number(from._internal_example_number());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PhoneNumberDesc::CopyFrom(const PhoneNumberDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.PhoneNumberDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PhoneNumberDesc::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PhoneNumberDesc::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PhoneNumberDesc::InternalSwap(PhoneNumberDesc* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.possible_length_.InternalSwap(&other->_impl_.possible_length_);
  _impl_.possible_length_local_only_.InternalSwap(&other->_impl_.possible_length_local_only_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.national_number_pattern_, &other->_impl_.national_number_pattern_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.example_number_, &other->_impl_.example_number_, arena);
}

std::string PhoneNumberDesc::GetTypeName() const {
  return "i18n.phonenumbers.PhoneNumberDesc";
}

// ===================================================================

class PhoneMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<PhoneMetadata>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_._has_bits_);
  static const ::i18n::phonenumbers::PhoneNumberDesc& general_desc(const PhoneMetadata* msg);
  static void set_has_general_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::i18n::phonenumbers::PhoneNumberDesc& fixed_line(const PhoneMetadata* msg);
  static void set_has_fixed_line(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::i18n::phonenumbers::PhoneNumberDesc& mobile(const PhoneMetadata* msg);
  static void set_has_mobile(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::i18n::phonenumbers::PhoneNumberDesc& toll_free(const PhoneMetadata* msg);
  static void set_has_toll_free(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::i18n::phonenumbers::PhoneNumberDesc& premium_rate(const PhoneMetadata* msg);
  static void set_has_premium_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::i18n::phonenumbers::PhoneNumberDesc& shared_cost(const PhoneMetadata* msg);
  static void set_has_shared_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::i18n::phonenumbers::PhoneNumberDesc& personal_number(const PhoneMetadata* msg);
  static void set_has_personal_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::i18n::phonenumbers::PhoneNumberDesc& voip(const PhoneMetadata* msg);
  static void set_has_voip(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::i18n::phonenumbers::PhoneNumberDesc& pager(const PhoneMetadata* msg);
  static void set_has_pager(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::i18n::phonenumbers::PhoneNumberDesc& uan(const PhoneMetadata* msg);
  static void set_has_uan(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::i18n::phonenumbers::PhoneNumberDesc& emergency(const PhoneMetadata* msg);
  static void set_has_emergency(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::i18n::phonenumbers::PhoneNumberDesc& voicemail(const PhoneMetadata* msg);
  static void set_has_voicemail(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::i18n::phonenumbers::PhoneNumberDesc& short_code(const PhoneMetadata* msg);
  static void set_has_short_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::i18n::phonenumbers::PhoneNumberDesc& standard_rate(const PhoneMetadata* msg);
  static void set_has_standard_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::i18n::phonenumbers::PhoneNumberDesc& carrier_specific(const PhoneMetadata* msg);
  static void set_has_carrier_specific(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::i18n::phonenumbers::PhoneNumberDesc& sms_services(const PhoneMetadata* msg);
  static void set_has_sms_services(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::i18n::phonenumbers::PhoneNumberDesc& no_international_dialling(const PhoneMetadata* msg);
  static void set_has_no_international_dialling(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_international_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_preferred_international_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_national_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preferred_extn_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_national_prefix_for_parsing(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_national_prefix_transform_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_same_mobile_and_fixed_line_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_main_country_for_code(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_leading_digits(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mobile_number_portable_region(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_Internal::general_desc(const PhoneMetadata* msg) {
  return *msg->_impl_.general_desc_;
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_Internal::fixed_line(const PhoneMetadata* msg) {
  return *msg->_impl_.fixed_line_;
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_Internal::mobile(const PhoneMetadata* msg) {
  return *msg->_impl_.mobile_;
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_Internal::toll_free(const PhoneMetadata* msg) {
  return *msg->_impl_.toll_free_;
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_Internal::premium_rate(const PhoneMetadata* msg) {
  return *msg->_impl_.premium_rate_;
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_Internal::shared_cost(const PhoneMetadata* msg) {
  return *msg->_impl_.shared_cost_;
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_Internal::personal_number(const PhoneMetadata* msg) {
  return *msg->_impl_.personal_number_;
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_Internal::voip(const PhoneMetadata* msg) {
  return *msg->_impl_.voip_;
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_Internal::pager(const PhoneMetadata* msg) {
  return *msg->_impl_.pager_;
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_Internal::uan(const PhoneMetadata* msg) {
  return *msg->_impl_.uan_;
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_Internal::emergency(const PhoneMetadata* msg) {
  return *msg->_impl_.emergency_;
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_Internal::voicemail(const PhoneMetadata* msg) {
  return *msg->_impl_.voicemail_;
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_Internal::short_code(const PhoneMetadata* msg) {
  return *msg->_impl_.short_code_;
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_Internal::standard_rate(const PhoneMetadata* msg) {
  return *msg->_impl_.standard_rate_;
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_Internal::carrier_specific(const PhoneMetadata* msg) {
  return *msg->_impl_.carrier_specific_;
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_Internal::sms_services(const PhoneMetadata* msg) {
  return *msg->_impl_.sms_services_;
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_Internal::no_international_dialling(const PhoneMetadata* msg) {
  return *msg->_impl_.no_international_dialling_;
}
PhoneMetadata::PhoneMetadata(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:i18n.phonenumbers.PhoneMetadata)
}
inline PROTOBUF_NDEBUG_INLINE PhoneMetadata::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        number_format_{visibility, arena, from.number_format_},
        intl_number_format_{visibility, arena, from.intl_number_format_},
        id_(arena, from.id_),
        international_prefix_(arena, from.international_prefix_),
        national_prefix_(arena, from.national_prefix_),
        preferred_extn_prefix_(arena, from.preferred_extn_prefix_),
        national_prefix_for_parsing_(arena, from.national_prefix_for_parsing_),
        national_prefix_transform_rule_(arena, from.national_prefix_transform_rule_),
        preferred_international_prefix_(arena, from.preferred_international_prefix_),
        leading_digits_(arena, from.leading_digits_) {}

PhoneMetadata::PhoneMetadata(
    ::google::protobuf::Arena* arena,
    const PhoneMetadata& from)
    : ::google::protobuf::MessageLite(arena) {
  PhoneMetadata* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.general_desc_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(arena, *from._impl_.general_desc_)
                : nullptr;
  _impl_.fixed_line_ = (cached_has_bits & 0x00000200u)
                ? CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(arena, *from._impl_.fixed_line_)
                : nullptr;
  _impl_.mobile_ = (cached_has_bits & 0x00000400u)
                ? CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(arena, *from._impl_.mobile_)
                : nullptr;
  _impl_.toll_free_ = (cached_has_bits & 0x00000800u)
                ? CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(arena, *from._impl_.toll_free_)
                : nullptr;
  _impl_.premium_rate_ = (cached_has_bits & 0x00001000u)
                ? CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(arena, *from._impl_.premium_rate_)
                : nullptr;
  _impl_.shared_cost_ = (cached_has_bits & 0x00002000u)
                ? CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(arena, *from._impl_.shared_cost_)
                : nullptr;
  _impl_.personal_number_ = (cached_has_bits & 0x00004000u)
                ? CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(arena, *from._impl_.personal_number_)
                : nullptr;
  _impl_.voip_ = (cached_has_bits & 0x00008000u)
                ? CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(arena, *from._impl_.voip_)
                : nullptr;
  _impl_.pager_ = (cached_has_bits & 0x00010000u)
                ? CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(arena, *from._impl_.pager_)
                : nullptr;
  _impl_.no_international_dialling_ = (cached_has_bits & 0x00020000u)
                ? CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(arena, *from._impl_.no_international_dialling_)
                : nullptr;
  _impl_.uan_ = (cached_has_bits & 0x00040000u)
                ? CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(arena, *from._impl_.uan_)
                : nullptr;
  _impl_.emergency_ = (cached_has_bits & 0x00080000u)
                ? CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(arena, *from._impl_.emergency_)
                : nullptr;
  _impl_.voicemail_ = (cached_has_bits & 0x00100000u)
                ? CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(arena, *from._impl_.voicemail_)
                : nullptr;
  _impl_.short_code_ = (cached_has_bits & 0x00200000u)
                ? CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(arena, *from._impl_.short_code_)
                : nullptr;
  _impl_.standard_rate_ = (cached_has_bits & 0x00400000u)
                ? CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(arena, *from._impl_.standard_rate_)
                : nullptr;
  _impl_.carrier_specific_ = (cached_has_bits & 0x00800000u)
                ? CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(arena, *from._impl_.carrier_specific_)
                : nullptr;
  _impl_.sms_services_ = (cached_has_bits & 0x01000000u)
                ? CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(arena, *from._impl_.sms_services_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, country_code_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, country_code_),
           offsetof(Impl_, mobile_number_portable_region_) -
               offsetof(Impl_, country_code_) +
               sizeof(Impl_::mobile_number_portable_region_));

  // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.PhoneMetadata)
}
inline PROTOBUF_NDEBUG_INLINE PhoneMetadata::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        number_format_{visibility, arena},
        intl_number_format_{visibility, arena},
        id_(arena),
        international_prefix_(arena),
        national_prefix_(arena),
        preferred_extn_prefix_(arena),
        national_prefix_for_parsing_(arena),
        national_prefix_transform_rule_(arena),
        preferred_international_prefix_(arena),
        leading_digits_(arena) {}

inline void PhoneMetadata::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, general_desc_),
           0,
           offsetof(Impl_, mobile_number_portable_region_) -
               offsetof(Impl_, general_desc_) +
               sizeof(Impl_::mobile_number_portable_region_));
}
PhoneMetadata::~PhoneMetadata() {
  // @@protoc_insertion_point(destructor:i18n.phonenumbers.PhoneMetadata)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void PhoneMetadata::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.id_.Destroy();
  _impl_.international_prefix_.Destroy();
  _impl_.national_prefix_.Destroy();
  _impl_.preferred_extn_prefix_.Destroy();
  _impl_.national_prefix_for_parsing_.Destroy();
  _impl_.national_prefix_transform_rule_.Destroy();
  _impl_.preferred_international_prefix_.Destroy();
  _impl_.leading_digits_.Destroy();
  delete _impl_.general_desc_;
  delete _impl_.fixed_line_;
  delete _impl_.mobile_;
  delete _impl_.toll_free_;
  delete _impl_.premium_rate_;
  delete _impl_.shared_cost_;
  delete _impl_.personal_number_;
  delete _impl_.voip_;
  delete _impl_.pager_;
  delete _impl_.no_international_dialling_;
  delete _impl_.uan_;
  delete _impl_.emergency_;
  delete _impl_.voicemail_;
  delete _impl_.short_code_;
  delete _impl_.standard_rate_;
  delete _impl_.carrier_specific_;
  delete _impl_.sms_services_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PhoneMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.PhoneMetadata)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.number_format_.Clear();
  _impl_.intl_number_format_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.international_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.national_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.preferred_extn_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.national_prefix_for_parsing_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.national_prefix_transform_rule_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.preferred_international_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.leading_digits_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.general_desc_ != nullptr);
      _impl_.general_desc_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.fixed_line_ != nullptr);
      _impl_.fixed_line_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.mobile_ != nullptr);
      _impl_.mobile_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.toll_free_ != nullptr);
      _impl_.toll_free_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.premium_rate_ != nullptr);
      _impl_.premium_rate_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(_impl_.shared_cost_ != nullptr);
      _impl_.shared_cost_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(_impl_.personal_number_ != nullptr);
      _impl_.personal_number_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      ABSL_DCHECK(_impl_.voip_ != nullptr);
      _impl_.voip_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ABSL_DCHECK(_impl_.pager_ != nullptr);
      _impl_.pager_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      ABSL_DCHECK(_impl_.no_international_dialling_ != nullptr);
      _impl_.no_international_dialling_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      ABSL_DCHECK(_impl_.uan_ != nullptr);
      _impl_.uan_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      ABSL_DCHECK(_impl_.emergency_ != nullptr);
      _impl_.emergency_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      ABSL_DCHECK(_impl_.voicemail_ != nullptr);
      _impl_.voicemail_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      ABSL_DCHECK(_impl_.short_code_ != nullptr);
      _impl_.short_code_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      ABSL_DCHECK(_impl_.standard_rate_ != nullptr);
      _impl_.standard_rate_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      ABSL_DCHECK(_impl_.carrier_specific_ != nullptr);
      _impl_.carrier_specific_->Clear();
    }
  }
  if (cached_has_bits & 0x01000000u) {
    ABSL_DCHECK(_impl_.sms_services_ != nullptr);
    _impl_.sms_services_->Clear();
  }
  if (cached_has_bits & 0x1e000000u) {
    ::memset(&_impl_.country_code_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.mobile_number_portable_region_) -
        reinterpret_cast<char*>(&_impl_.country_code_)) + sizeof(_impl_.mobile_number_portable_region_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PhoneMetadata::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 31, 19, 0, 7> PhoneMetadata::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_._has_bits_),
    0, // no _extensions_
    33, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    33562624,  // skipmap
    offsetof(decltype(_table_), field_entries),
    31,  // num_field_entries
    19,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PhoneMetadata_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 8, 0, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.general_desc_)}},
    // optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 9, 1, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.fixed_line_)}},
    // optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 10, 2, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.mobile_)}},
    // optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 11, 3, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.toll_free_)}},
    // optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 12, 4, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.premium_rate_)}},
    // optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 13, 5, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.shared_cost_)}},
    // optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 14, 6, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.personal_number_)}},
    // optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 15, 7, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.voip_)}},
    // required string id = 9;
    {::_pbi::TcParser::FastBS1,
     {74, 0, 0, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.id_)}},
    // optional int32 country_code = 10;
    {::_pbi::TcParser::FastV32S1,
     {80, 25, 0, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.country_code_)}},
    // optional string international_prefix = 11;
    {::_pbi::TcParser::FastBS1,
     {90, 1, 0, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.international_prefix_)}},
    // optional string national_prefix = 12;
    {::_pbi::TcParser::FastBS1,
     {98, 2, 0, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.national_prefix_)}},
    // optional string preferred_extn_prefix = 13;
    {::_pbi::TcParser::FastBS1,
     {106, 3, 0, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.preferred_extn_prefix_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional string national_prefix_for_parsing = 15;
    {::_pbi::TcParser::FastBS1,
     {122, 4, 0, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.national_prefix_for_parsing_)}},
    // optional string national_prefix_transform_rule = 16;
    {::_pbi::TcParser::FastBS2,
     {386, 5, 0, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.national_prefix_transform_rule_)}},
    // optional string preferred_international_prefix = 17;
    {::_pbi::TcParser::FastBS2,
     {394, 6, 0, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.preferred_international_prefix_)}},
    // optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
    {::_pbi::TcParser::FastV8S2,
     {400, 26, 0, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.same_mobile_and_fixed_line_pattern_)}},
    // repeated .i18n.phonenumbers.NumberFormat number_format = 19;
    {::_pbi::TcParser::FastMtR2,
     {410, 63, 8, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.number_format_)}},
    // repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
    {::_pbi::TcParser::FastMtR2,
     {418, 63, 9, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.intl_number_format_)}},
    // optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 16, 10, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.pager_)}},
    // optional bool main_country_for_code = 22 [default = false];
    {::_pbi::TcParser::FastV8S2,
     {432, 27, 0, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.main_country_for_code_)}},
    // optional string leading_digits = 23;
    {::_pbi::TcParser::FastBS2,
     {442, 7, 0, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.leading_digits_)}},
    // optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
    {::_pbi::TcParser::FastMtS2,
     {450, 17, 11, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.no_international_dialling_)}},
    // optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
    {::_pbi::TcParser::FastMtS2,
     {458, 18, 12, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.uan_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
    {::_pbi::TcParser::FastMtS2,
     {474, 19, 13, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.emergency_)}},
    // optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
    {::_pbi::TcParser::FastMtS2,
     {482, 20, 14, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.voicemail_)}},
    // optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
    {::_pbi::TcParser::FastMtS2,
     {490, 21, 15, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.short_code_)}},
    // optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
    {::_pbi::TcParser::FastMtS2,
     {498, 22, 16, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.standard_rate_)}},
    // optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
    {::_pbi::TcParser::FastMtS2,
     {506, 23, 17, PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.carrier_specific_)}},
  }}, {{
    33, 0, 1,
    65534, 30,
    65535, 65535
  }}, {{
    // optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.general_desc_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.fixed_line_), _Internal::kHasBitsOffset + 9, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.mobile_), _Internal::kHasBitsOffset + 10, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.toll_free_), _Internal::kHasBitsOffset + 11, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.premium_rate_), _Internal::kHasBitsOffset + 12, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.shared_cost_), _Internal::kHasBitsOffset + 13, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.personal_number_), _Internal::kHasBitsOffset + 14, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.voip_), _Internal::kHasBitsOffset + 15, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // required string id = 9;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional int32 country_code = 10;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.country_code_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string international_prefix = 11;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.international_prefix_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string national_prefix = 12;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.national_prefix_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string preferred_extn_prefix = 13;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.preferred_extn_prefix_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string national_prefix_for_parsing = 15;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.national_prefix_for_parsing_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string national_prefix_transform_rule = 16;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.national_prefix_transform_rule_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string preferred_international_prefix = 17;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.preferred_international_prefix_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.same_mobile_and_fixed_line_pattern_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated .i18n.phonenumbers.NumberFormat number_format = 19;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.number_format_), -1, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.intl_number_format_), -1, 9,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.pager_), _Internal::kHasBitsOffset + 16, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool main_country_for_code = 22 [default = false];
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.main_country_for_code_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string leading_digits = 23;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.leading_digits_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.no_international_dialling_), _Internal::kHasBitsOffset + 17, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.uan_), _Internal::kHasBitsOffset + 18, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.emergency_), _Internal::kHasBitsOffset + 19, 13,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.voicemail_), _Internal::kHasBitsOffset + 20, 14,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.short_code_), _Internal::kHasBitsOffset + 21, 15,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.standard_rate_), _Internal::kHasBitsOffset + 22, 16,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.carrier_specific_), _Internal::kHasBitsOffset + 23, 17,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool mobile_number_portable_region = 32 [default = false];
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.mobile_number_portable_region_), _Internal::kHasBitsOffset + 28, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .i18n.phonenumbers.PhoneNumberDesc sms_services = 33;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.sms_services_), _Internal::kHasBitsOffset + 24, 18,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumberDesc>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumberDesc>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumberDesc>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumberDesc>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumberDesc>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumberDesc>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumberDesc>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumberDesc>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::NumberFormat>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::NumberFormat>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumberDesc>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumberDesc>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumberDesc>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumberDesc>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumberDesc>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumberDesc>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumberDesc>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumberDesc>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumberDesc>()},
  }}, {{
  }},
};

::uint8_t* PhoneMetadata::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:i18n.phonenumbers.PhoneMetadata)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::general_desc(this),
        _Internal::general_desc(this).GetCachedSize(), target, stream);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::fixed_line(this),
        _Internal::fixed_line(this).GetCachedSize(), target, stream);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::mobile(this),
        _Internal::mobile(this).GetCachedSize(), target, stream);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::toll_free(this),
        _Internal::toll_free(this).GetCachedSize(), target, stream);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::premium_rate(this),
        _Internal::premium_rate(this).GetCachedSize(), target, stream);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::shared_cost(this),
        _Internal::shared_cost(this).GetCachedSize(), target, stream);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::personal_number(this),
        _Internal::personal_number(this).GetCachedSize(), target, stream);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::voip(this),
        _Internal::voip(this).GetCachedSize(), target, stream);
  }

  // required string id = 9;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_id();
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // optional int32 country_code = 10;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_country_code(), target);
  }

  // optional string international_prefix = 11;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_international_prefix();
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // optional string national_prefix = 12;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_national_prefix();
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // optional string preferred_extn_prefix = 13;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_preferred_extn_prefix();
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // optional string national_prefix_for_parsing = 15;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_national_prefix_for_parsing();
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // optional string national_prefix_transform_rule = 16;
  if (cached_has_bits & 0x00000020u) {
    const std::string& _s = this->_internal_national_prefix_transform_rule();
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // optional string preferred_international_prefix = 17;
  if (cached_has_bits & 0x00000040u) {
    const std::string& _s = this->_internal_preferred_international_prefix();
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        18, this->_internal_same_mobile_and_fixed_line_pattern(), target);
  }

  // repeated .i18n.phonenumbers.NumberFormat number_format = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_number_format_size()); i < n; i++) {
    const auto& repfield = this->_internal_number_format().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_intl_number_format_size()); i < n; i++) {
    const auto& repfield = this->_internal_intl_number_format().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        21, _Internal::pager(this),
        _Internal::pager(this).GetCachedSize(), target, stream);
  }

  // optional bool main_country_for_code = 22 [default = false];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        22, this->_internal_main_country_for_code(), target);
  }

  // optional string leading_digits = 23;
  if (cached_has_bits & 0x00000080u) {
    const std::string& _s = this->_internal_leading_digits();
    target = stream->WriteStringMaybeAliased(23, _s, target);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        24, _Internal::no_international_dialling(this),
        _Internal::no_international_dialling(this).GetCachedSize(), target, stream);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        25, _Internal::uan(this),
        _Internal::uan(this).GetCachedSize(), target, stream);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        27, _Internal::emergency(this),
        _Internal::emergency(this).GetCachedSize(), target, stream);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        28, _Internal::voicemail(this),
        _Internal::voicemail(this).GetCachedSize(), target, stream);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        29, _Internal::short_code(this),
        _Internal::short_code(this).GetCachedSize(), target, stream);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        30, _Internal::standard_rate(this),
        _Internal::standard_rate(this).GetCachedSize(), target, stream);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        31, _Internal::carrier_specific(this),
        _Internal::carrier_specific(this).GetCachedSize(), target, stream);
  }

  // optional bool mobile_number_portable_region = 32 [default = false];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        32, this->_internal_mobile_number_portable_region(), target);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc sms_services = 33;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        33, _Internal::sms_services(this),
        _Internal::sms_services(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:i18n.phonenumbers.PhoneMetadata)
  return target;
}

::size_t PhoneMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.PhoneMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .i18n.phonenumbers.NumberFormat number_format = 19;
  total_size += 2UL * this->_internal_number_format_size();
  for (const auto& msg : this->_internal_number_format()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
  total_size += 2UL * this->_internal_intl_number_format_size();
  for (const auto& msg : this->_internal_intl_number_format()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // required string id = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  if (cached_has_bits & 0x000000feu) {
    // optional string international_prefix = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_international_prefix());
    }

    // optional string national_prefix = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_national_prefix());
    }

    // optional string preferred_extn_prefix = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_preferred_extn_prefix());
    }

    // optional string national_prefix_for_parsing = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_national_prefix_for_parsing());
    }

    // optional string national_prefix_transform_rule = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_national_prefix_transform_rule());
    }

    // optional string preferred_international_prefix = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_preferred_international_prefix());
    }

    // optional string leading_digits = 23;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_leading_digits());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.general_desc_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.fixed_line_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.mobile_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.toll_free_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.premium_rate_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.shared_cost_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.personal_number_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
    if (cached_has_bits & 0x00008000u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.voip_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pager_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.no_international_dialling_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
    if (cached_has_bits & 0x00040000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.uan_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
    if (cached_has_bits & 0x00080000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.emergency_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
    if (cached_has_bits & 0x00100000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.voicemail_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
    if (cached_has_bits & 0x00200000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.short_code_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
    if (cached_has_bits & 0x00400000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.standard_rate_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
    if (cached_has_bits & 0x00800000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.carrier_specific_);
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional .i18n.phonenumbers.PhoneNumberDesc sms_services = 33;
    if (cached_has_bits & 0x01000000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.sms_services_);
    }

    // optional int32 country_code = 10;
    if (cached_has_bits & 0x02000000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_country_code());
    }

    // optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
    if (cached_has_bits & 0x04000000u) {
      total_size += 3;
    }

    // optional bool main_country_for_code = 22 [default = false];
    if (cached_has_bits & 0x08000000u) {
      total_size += 3;
    }

    // optional bool mobile_number_portable_region = 32 [default = false];
    if (cached_has_bits & 0x10000000u) {
      total_size += 3;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void PhoneMetadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PhoneMetadata*>(
      &from));
}

void PhoneMetadata::MergeFrom(const PhoneMetadata& from) {
  PhoneMetadata* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.PhoneMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_number_format()->MergeFrom(
      from._internal_number_format());
  _this->_internal_mutable_intl_number_format()->MergeFrom(
      from._internal_intl_number_format());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_international_prefix(from._internal_international_prefix());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_national_prefix(from._internal_national_prefix());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_preferred_extn_prefix(from._internal_preferred_extn_prefix());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_national_prefix_for_parsing(from._internal_national_prefix_for_parsing());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_national_prefix_transform_rule(from._internal_national_prefix_transform_rule());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_preferred_international_prefix(from._internal_preferred_international_prefix());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_leading_digits(from._internal_leading_digits());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_general_desc()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(
          from._internal_general_desc());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_fixed_line()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(
          from._internal_fixed_line());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_mobile()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(
          from._internal_mobile());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_toll_free()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(
          from._internal_toll_free());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_premium_rate()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(
          from._internal_premium_rate());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_shared_cost()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(
          from._internal_shared_cost());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_personal_number()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(
          from._internal_personal_number());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_voip()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(
          from._internal_voip());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_pager()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(
          from._internal_pager());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_no_international_dialling()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(
          from._internal_no_international_dialling());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_uan()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(
          from._internal_uan());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_emergency()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(
          from._internal_emergency());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_voicemail()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(
          from._internal_voicemail());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_short_code()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(
          from._internal_short_code());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_standard_rate()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(
          from._internal_standard_rate());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_carrier_specific()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(
          from._internal_carrier_specific());
    }
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_sms_services()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(
          from._internal_sms_services());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.country_code_ = from._impl_.country_code_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.same_mobile_and_fixed_line_pattern_ = from._impl_.same_mobile_and_fixed_line_pattern_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.main_country_for_code_ = from._impl_.main_country_for_code_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.mobile_number_portable_region_ = from._impl_.mobile_number_portable_region_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PhoneMetadata::CopyFrom(const PhoneMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.PhoneMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PhoneMetadata::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(_internal_number_format()))
    return false;
  if (!::google::protobuf::internal::AllAreInitialized(_internal_intl_number_format()))
    return false;
  return true;
}

::_pbi::CachedSize* PhoneMetadata::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PhoneMetadata::InternalSwap(PhoneMetadata* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.number_format_.InternalSwap(&other->_impl_.number_format_);
  _impl_.intl_number_format_.InternalSwap(&other->_impl_.intl_number_format_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.international_prefix_, &other->_impl_.international_prefix_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.national_prefix_, &other->_impl_.national_prefix_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.preferred_extn_prefix_, &other->_impl_.preferred_extn_prefix_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.national_prefix_for_parsing_, &other->_impl_.national_prefix_for_parsing_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.national_prefix_transform_rule_, &other->_impl_.national_prefix_transform_rule_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.preferred_international_prefix_, &other->_impl_.preferred_international_prefix_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.leading_digits_, &other->_impl_.leading_digits_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.mobile_number_portable_region_)
      + sizeof(PhoneMetadata::_impl_.mobile_number_portable_region_)
      - PROTOBUF_FIELD_OFFSET(PhoneMetadata, _impl_.general_desc_)>(
          reinterpret_cast<char*>(&_impl_.general_desc_),
          reinterpret_cast<char*>(&other->_impl_.general_desc_));
}

std::string PhoneMetadata::GetTypeName() const {
  return "i18n.phonenumbers.PhoneMetadata";
}

// ===================================================================

class PhoneMetadataCollection::_Internal {
 public:
};

PhoneMetadataCollection::PhoneMetadataCollection(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:i18n.phonenumbers.PhoneMetadataCollection)
}
inline PROTOBUF_NDEBUG_INLINE PhoneMetadataCollection::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : metadata_{visibility, arena, from.metadata_},
        _cached_size_{0} {}

PhoneMetadataCollection::PhoneMetadataCollection(
    ::google::protobuf::Arena* arena,
    const PhoneMetadataCollection& from)
    : ::google::protobuf::MessageLite(arena) {
  PhoneMetadataCollection* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.PhoneMetadataCollection)
}
inline PROTOBUF_NDEBUG_INLINE PhoneMetadataCollection::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : metadata_{visibility, arena},
        _cached_size_{0} {}

inline void PhoneMetadataCollection::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PhoneMetadataCollection::~PhoneMetadataCollection() {
  // @@protoc_insertion_point(destructor:i18n.phonenumbers.PhoneMetadataCollection)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void PhoneMetadataCollection::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PhoneMetadataCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.PhoneMetadataCollection)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PhoneMetadataCollection::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PhoneMetadataCollection::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PhoneMetadataCollection_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PhoneMetadataCollection, _impl_.metadata_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
    {PROTOBUF_FIELD_OFFSET(PhoneMetadataCollection, _impl_.metadata_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneMetadata>()},
  }}, {{
  }},
};

::uint8_t* PhoneMetadataCollection::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:i18n.phonenumbers.PhoneMetadataCollection)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:i18n.phonenumbers.PhoneMetadataCollection)
  return target;
}

::size_t PhoneMetadataCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.PhoneMetadataCollection)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->_internal_metadata()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void PhoneMetadataCollection::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PhoneMetadataCollection*>(
      &from));
}

void PhoneMetadataCollection::MergeFrom(const PhoneMetadataCollection& from) {
  PhoneMetadataCollection* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.PhoneMetadataCollection)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_metadata()->MergeFrom(
      from._internal_metadata());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PhoneMetadataCollection::CopyFrom(const PhoneMetadataCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.PhoneMetadataCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PhoneMetadataCollection::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(_internal_metadata()))
    return false;
  return true;
}

::_pbi::CachedSize* PhoneMetadataCollection::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PhoneMetadataCollection::InternalSwap(PhoneMetadataCollection* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
}

std::string PhoneMetadataCollection::GetTypeName() const {
  return "i18n.phonenumbers.PhoneMetadataCollection";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace phonenumbers
}  // namespace i18n
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
