// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: phonenumber.proto
// Protobuf C++ Version: 5.29.4

#include "phonenumber.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace i18n {
namespace phonenumbers {

inline constexpr PhoneNumber::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        extension_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        raw_input_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        preferred_domestic_carrier_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        national_number_{::uint64_t{0u}},
        country_code_{0},
        italian_leading_zero_{false},
        country_code_source_{static_cast< ::i18n::phonenumbers::PhoneNumber_CountryCodeSource >(0)},
        number_of_leading_zeros_{1} {}

template <typename>
PROTOBUF_CONSTEXPR PhoneNumber::PhoneNumber(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PhoneNumberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhoneNumberDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhoneNumberDefaultTypeInternal() {}
  union {
    PhoneNumber _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhoneNumberDefaultTypeInternal _PhoneNumber_default_instance_;
}  // namespace phonenumbers
}  // namespace i18n
namespace i18n {
namespace phonenumbers {
PROTOBUF_CONSTINIT const uint32_t PhoneNumber_CountryCodeSource_internal_data_[] = {
    131072u, 32u, 262408u, };
bool PhoneNumber_CountryCodeSource_IsValid(int value) {
  return 0 <= value && value <= 20 && ((1049635u >> value) & 1) != 0;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    PhoneNumber_CountryCodeSource_strings[5] = {};

static const char PhoneNumber_CountryCodeSource_names[] = {
    "FROM_DEFAULT_COUNTRY"
    "FROM_NUMBER_WITHOUT_PLUS_SIGN"
    "FROM_NUMBER_WITH_IDD"
    "FROM_NUMBER_WITH_PLUS_SIGN"
    "UNSPECIFIED"
};

static const ::google::protobuf::internal::EnumEntry PhoneNumber_CountryCodeSource_entries[] =
    {
        {{&PhoneNumber_CountryCodeSource_names[0], 20}, 20},
        {{&PhoneNumber_CountryCodeSource_names[20], 29}, 10},
        {{&PhoneNumber_CountryCodeSource_names[49], 20}, 5},
        {{&PhoneNumber_CountryCodeSource_names[69], 26}, 1},
        {{&PhoneNumber_CountryCodeSource_names[95], 11}, 0},
};

static const int PhoneNumber_CountryCodeSource_entries_by_number[] = {
    4,  // 0 -> UNSPECIFIED
    3,  // 1 -> FROM_NUMBER_WITH_PLUS_SIGN
    2,  // 5 -> FROM_NUMBER_WITH_IDD
    1,  // 10 -> FROM_NUMBER_WITHOUT_PLUS_SIGN
    0,  // 20 -> FROM_DEFAULT_COUNTRY
};

const std::string& PhoneNumber_CountryCodeSource_Name(PhoneNumber_CountryCodeSource value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          PhoneNumber_CountryCodeSource_entries, PhoneNumber_CountryCodeSource_entries_by_number,
          5, PhoneNumber_CountryCodeSource_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      PhoneNumber_CountryCodeSource_entries, PhoneNumber_CountryCodeSource_entries_by_number, 5,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : PhoneNumber_CountryCodeSource_strings[idx].get();
}

bool PhoneNumber_CountryCodeSource_Parse(absl::string_view name, PhoneNumber_CountryCodeSource* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      PhoneNumber_CountryCodeSource_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<PhoneNumber_CountryCodeSource>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr PhoneNumber_CountryCodeSource PhoneNumber::UNSPECIFIED;
constexpr PhoneNumber_CountryCodeSource PhoneNumber::FROM_NUMBER_WITH_PLUS_SIGN;
constexpr PhoneNumber_CountryCodeSource PhoneNumber::FROM_NUMBER_WITH_IDD;
constexpr PhoneNumber_CountryCodeSource PhoneNumber::FROM_NUMBER_WITHOUT_PLUS_SIGN;
constexpr PhoneNumber_CountryCodeSource PhoneNumber::FROM_DEFAULT_COUNTRY;
constexpr PhoneNumber_CountryCodeSource PhoneNumber::CountryCodeSource_MIN;
constexpr PhoneNumber_CountryCodeSource PhoneNumber::CountryCodeSource_MAX;
constexpr int PhoneNumber::CountryCodeSource_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class PhoneNumber::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PhoneNumber>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000018) ^ 0x00000018) != 0;
  }
};

PhoneNumber::PhoneNumber(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:i18n.phonenumbers.PhoneNumber)
}
inline PROTOBUF_NDEBUG_INLINE PhoneNumber::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::i18n::phonenumbers::PhoneNumber& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        extension_(arena, from.extension_),
        raw_input_(arena, from.raw_input_),
        preferred_domestic_carrier_code_(arena, from.preferred_domestic_carrier_code_) {}

PhoneNumber::PhoneNumber(
    ::google::protobuf::Arena* arena,
    const PhoneNumber& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PhoneNumber* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, national_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, national_number_),
           offsetof(Impl_, number_of_leading_zeros_) -
               offsetof(Impl_, national_number_) +
               sizeof(Impl_::number_of_leading_zeros_));

  // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.PhoneNumber)
}
inline PROTOBUF_NDEBUG_INLINE PhoneNumber::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        extension_(arena),
        raw_input_(arena),
        preferred_domestic_carrier_code_(arena),
        number_of_leading_zeros_{1} {}

inline void PhoneNumber::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, national_number_),
           0,
           offsetof(Impl_, country_code_source_) -
               offsetof(Impl_, national_number_) +
               sizeof(Impl_::country_code_source_));
}
PhoneNumber::~PhoneNumber() {
  // @@protoc_insertion_point(destructor:i18n.phonenumbers.PhoneNumber)
  SharedDtor(*this);
}
inline void PhoneNumber::SharedDtor(MessageLite& self) {
  PhoneNumber& this_ = static_cast<PhoneNumber&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.extension_.Destroy();
  this_._impl_.raw_input_.Destroy();
  this_._impl_.preferred_domestic_carrier_code_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PhoneNumber::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PhoneNumber(arena);
}
constexpr auto PhoneNumber::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PhoneNumber),
                                            alignof(PhoneNumber));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<30> PhoneNumber::_class_data_ = {
    {
        &_PhoneNumber_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        PhoneNumber::IsInitializedImpl,
        &PhoneNumber::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<PhoneNumber>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PhoneNumber::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<PhoneNumber>(), &PhoneNumber::ByteSizeLong,
            &PhoneNumber::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_._cached_size_),
        true,
    },
    "i18n.phonenumbers.PhoneNumber",
};
const ::google::protobuf::internal::ClassData* PhoneNumber::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 0, 2> PhoneNumber::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::i18n::phonenumbers::PhoneNumber>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional int32 number_of_leading_zeros = 8 [default = 1];
    {::_pbi::TcParser::FastV32S1,
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.number_of_leading_zeros_)}},
    // required int32 country_code = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 4, 0, PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.country_code_)}},
    // required uint64 national_number = 2;
    {::_pbi::TcParser::FastV64S1,
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.national_number_)}},
    // optional string extension = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.extension_)}},
    // optional bool italian_leading_zero = 4;
    {::_pbi::TcParser::FastV8S1,
     {32, 5, 0, PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.italian_leading_zero_)}},
    // optional string raw_input = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.raw_input_)}},
    // optional .i18n.phonenumbers.PhoneNumber.CountryCodeSource country_code_source = 6;
    {::_pbi::TcParser::FastEvS1,
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.country_code_source_)}},
    // optional string preferred_domestic_carrier_code = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 2, 0, PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.preferred_domestic_carrier_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required int32 country_code = 1;
    {PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.country_code_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // required uint64 national_number = 2;
    {PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.national_number_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string extension = 3;
    {PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.extension_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bool italian_leading_zero = 4;
    {PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.italian_leading_zero_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string raw_input = 5;
    {PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.raw_input_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional .i18n.phonenumbers.PhoneNumber.CountryCodeSource country_code_source = 6;
    {PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.country_code_source_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnum)},
    // optional string preferred_domestic_carrier_code = 7;
    {PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.preferred_domestic_carrier_code_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional int32 number_of_leading_zeros = 8 [default = 1];
    {PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.number_of_leading_zeros_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {::_pbi::FieldAuxEnumData{}, ::i18n::phonenumbers::PhoneNumber_CountryCodeSource_internal_data_},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PhoneNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.PhoneNumber)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.extension_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.raw_input_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.preferred_domestic_carrier_code_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.national_number_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.country_code_source_) -
        reinterpret_cast<char*>(&_impl_.national_number_)) + sizeof(_impl_.country_code_source_));
    _impl_.number_of_leading_zeros_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PhoneNumber::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PhoneNumber& this_ = static_cast<const PhoneNumber&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PhoneNumber::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PhoneNumber& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:i18n.phonenumbers.PhoneNumber)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required int32 country_code = 1;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_country_code(), target);
          }

          // required uint64 national_number = 2;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_national_number(), target);
          }

          // optional string extension = 3;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_extension();
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // optional bool italian_leading_zero = 4;
          if (cached_has_bits & 0x00000020u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_italian_leading_zero(), target);
          }

          // optional string raw_input = 5;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_raw_input();
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // optional .i18n.phonenumbers.PhoneNumber.CountryCodeSource country_code_source = 6;
          if (cached_has_bits & 0x00000040u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_country_code_source(), target);
          }

          // optional string preferred_domestic_carrier_code = 7;
          if (cached_has_bits & 0x00000004u) {
            const std::string& _s = this_._internal_preferred_domestic_carrier_code();
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // optional int32 number_of_leading_zeros = 8 [default = 1];
          if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_number_of_leading_zeros(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:i18n.phonenumbers.PhoneNumber)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PhoneNumber::ByteSizeLong(const MessageLite& base) {
          const PhoneNumber& this_ = static_cast<const PhoneNumber&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PhoneNumber::ByteSizeLong() const {
          const PhoneNumber& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.PhoneNumber)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // optional string extension = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_extension());
            }
            // optional string raw_input = 5;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_raw_input());
            }
            // optional string preferred_domestic_carrier_code = 7;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_preferred_domestic_carrier_code());
            }
          }
          if (cached_has_bits & 0x00000018u) {
            // required uint64 national_number = 2;
            if (cached_has_bits & 0x00000008u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_national_number());
            }
            // required int32 country_code = 1;
            if (cached_has_bits & 0x00000010u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_country_code());
            }
          }
          if (cached_has_bits & 0x000000e0u) {
            // optional bool italian_leading_zero = 4;
            if (cached_has_bits & 0x00000020u) {
              total_size += 2;
            }
            // optional .i18n.phonenumbers.PhoneNumber.CountryCodeSource country_code_source = 6;
            if (cached_has_bits & 0x00000040u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_country_code_source());
            }
            // optional int32 number_of_leading_zeros = 8 [default = 1];
            if (cached_has_bits & 0x00000080u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_number_of_leading_zeros());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void PhoneNumber::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PhoneNumber*>(&to_msg);
  auto& from = static_cast<const PhoneNumber&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.PhoneNumber)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_extension(from._internal_extension());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_raw_input(from._internal_raw_input());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_preferred_domestic_carrier_code(from._internal_preferred_domestic_carrier_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.national_number_ = from._impl_.national_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.country_code_ = from._impl_.country_code_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.italian_leading_zero_ = from._impl_.italian_leading_zero_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.country_code_source_ = from._impl_.country_code_source_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.number_of_leading_zeros_ = from._impl_.number_of_leading_zeros_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PhoneNumber::CopyFrom(const PhoneNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.PhoneNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PhoneNumber::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const PhoneNumber&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void PhoneNumber::InternalSwap(PhoneNumber* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.extension_, &other->_impl_.extension_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.raw_input_, &other->_impl_.raw_input_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.preferred_domestic_carrier_code_, &other->_impl_.preferred_domestic_carrier_code_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.number_of_leading_zeros_)
      + sizeof(PhoneNumber::_impl_.number_of_leading_zeros_)
      - PROTOBUF_FIELD_OFFSET(PhoneNumber, _impl_.national_number_)>(
          reinterpret_cast<char*>(&_impl_.national_number_),
          reinterpret_cast<char*>(&other->_impl_.national_number_));
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace phonenumbers
}  // namespace i18n
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
