// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geocoding_data.proto

#include "geocoding_data.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace i18n {
namespace phonenumbers {

inline constexpr PrefixesInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        prefixes_{},
        descriptions_{},
        lengths_{},
        prefixes_num_{0},
        lengths_num_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PrefixesInfo::PrefixesInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PrefixesInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrefixesInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrefixesInfoDefaultTypeInternal() {}
  union {
    PrefixesInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrefixesInfoDefaultTypeInternal _PrefixesInfo_default_instance_;

inline constexpr LanguageCodeInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        language_codes_{},
        language_codes_num_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LanguageCodeInfo::LanguageCodeInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LanguageCodeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LanguageCodeInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LanguageCodeInfoDefaultTypeInternal() {}
  union {
    LanguageCodeInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LanguageCodeInfoDefaultTypeInternal _LanguageCodeInfo_default_instance_;

inline constexpr CountryCodeInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        country_codes_{},
        country_codes_num_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CountryCodeInfo::CountryCodeInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CountryCodeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CountryCodeInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CountryCodeInfoDefaultTypeInternal() {}
  union {
    CountryCodeInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CountryCodeInfoDefaultTypeInternal _CountryCodeInfo_default_instance_;

inline constexpr CountriesInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        country_languages_{},
        country_languages_num_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CountriesInfo::CountriesInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CountriesInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CountriesInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CountriesInfoDefaultTypeInternal() {}
  union {
    CountriesInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CountriesInfoDefaultTypeInternal _CountriesInfo_default_instance_;

inline constexpr GeocodingInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        prefixes_info_{},
        languages_{},
        countries_info_{},
        countries_{},
        language_code_info_{nullptr},
        country_code_info_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GeocodingInfo::GeocodingInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GeocodingInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeocodingInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeocodingInfoDefaultTypeInternal() {}
  union {
    GeocodingInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeocodingInfoDefaultTypeInternal _GeocodingInfo_default_instance_;
}  // namespace phonenumbers
}  // namespace i18n
namespace i18n {
namespace phonenumbers {
// ===================================================================

class GeocodingInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GeocodingInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GeocodingInfo, _impl_._has_bits_);
  static const ::i18n::phonenumbers::LanguageCodeInfo& language_code_info(const GeocodingInfo* msg);
  static void set_has_language_code_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::i18n::phonenumbers::CountryCodeInfo& country_code_info(const GeocodingInfo* msg);
  static void set_has_country_code_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::i18n::phonenumbers::LanguageCodeInfo& GeocodingInfo::_Internal::language_code_info(const GeocodingInfo* msg) {
  return *msg->_impl_.language_code_info_;
}
const ::i18n::phonenumbers::CountryCodeInfo& GeocodingInfo::_Internal::country_code_info(const GeocodingInfo* msg) {
  return *msg->_impl_.country_code_info_;
}
GeocodingInfo::GeocodingInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:i18n.phonenumbers.GeocodingInfo)
}
inline PROTOBUF_NDEBUG_INLINE GeocodingInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        prefixes_info_{visibility, arena, from.prefixes_info_},
        languages_{visibility, arena, from.languages_},
        countries_info_{visibility, arena, from.countries_info_},
        countries_{visibility, arena, from.countries_} {}

GeocodingInfo::GeocodingInfo(
    ::google::protobuf::Arena* arena,
    const GeocodingInfo& from)
    : ::google::protobuf::MessageLite(arena) {
  GeocodingInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.language_code_info_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::i18n::phonenumbers::LanguageCodeInfo>(arena, *from._impl_.language_code_info_)
                : nullptr;
  _impl_.country_code_info_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::i18n::phonenumbers::CountryCodeInfo>(arena, *from._impl_.country_code_info_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.GeocodingInfo)
}
inline PROTOBUF_NDEBUG_INLINE GeocodingInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        prefixes_info_{visibility, arena},
        languages_{visibility, arena},
        countries_info_{visibility, arena},
        countries_{visibility, arena} {}

inline void GeocodingInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, language_code_info_),
           0,
           offsetof(Impl_, country_code_info_) -
               offsetof(Impl_, language_code_info_) +
               sizeof(Impl_::country_code_info_));
}
GeocodingInfo::~GeocodingInfo() {
  // @@protoc_insertion_point(destructor:i18n.phonenumbers.GeocodingInfo)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void GeocodingInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.language_code_info_;
  delete _impl_.country_code_info_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GeocodingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.GeocodingInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prefixes_info_.Clear();
  _impl_.languages_.Clear();
  _impl_.countries_info_.Clear();
  _impl_.countries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.language_code_info_ != nullptr);
      _impl_.language_code_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.country_code_info_ != nullptr);
      _impl_.country_code_info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GeocodingInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 4, 0, 2> GeocodingInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GeocodingInfo, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GeocodingInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .i18n.phonenumbers.PrefixesInfo prefixes_info = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GeocodingInfo, _impl_.prefixes_info_)}},
    // repeated string languages = 2;
    {::_pbi::TcParser::FastBR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GeocodingInfo, _impl_.languages_)}},
    // required .i18n.phonenumbers.LanguageCodeInfo language_code_info = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 1, PROTOBUF_FIELD_OFFSET(GeocodingInfo, _impl_.language_code_info_)}},
    // repeated .i18n.phonenumbers.CountriesInfo countries_info = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 2, PROTOBUF_FIELD_OFFSET(GeocodingInfo, _impl_.countries_info_)}},
    // repeated int32 countries = 5;
    {::_pbi::TcParser::FastV32R1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GeocodingInfo, _impl_.countries_)}},
    // required .i18n.phonenumbers.CountryCodeInfo country_code_info = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 3, PROTOBUF_FIELD_OFFSET(GeocodingInfo, _impl_.country_code_info_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .i18n.phonenumbers.PrefixesInfo prefixes_info = 1;
    {PROTOBUF_FIELD_OFFSET(GeocodingInfo, _impl_.prefixes_info_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string languages = 2;
    {PROTOBUF_FIELD_OFFSET(GeocodingInfo, _impl_.languages_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // required .i18n.phonenumbers.LanguageCodeInfo language_code_info = 3;
    {PROTOBUF_FIELD_OFFSET(GeocodingInfo, _impl_.language_code_info_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .i18n.phonenumbers.CountriesInfo countries_info = 4;
    {PROTOBUF_FIELD_OFFSET(GeocodingInfo, _impl_.countries_info_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated int32 countries = 5;
    {PROTOBUF_FIELD_OFFSET(GeocodingInfo, _impl_.countries_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kInt32)},
    // required .i18n.phonenumbers.CountryCodeInfo country_code_info = 6;
    {PROTOBUF_FIELD_OFFSET(GeocodingInfo, _impl_.country_code_info_), _Internal::kHasBitsOffset + 1, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::PrefixesInfo>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::LanguageCodeInfo>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::CountriesInfo>()},
    {::_pbi::TcParser::GetTable<::i18n::phonenumbers::CountryCodeInfo>()},
  }}, {{
  }},
};

::uint8_t* GeocodingInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:i18n.phonenumbers.GeocodingInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .i18n.phonenumbers.PrefixesInfo prefixes_info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_prefixes_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_prefixes_info().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string languages = 2;
  for (int i = 0, n = this->_internal_languages_size(); i < n; ++i) {
    const auto& s = this->_internal_languages().Get(i);
    target = stream->WriteString(2, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .i18n.phonenumbers.LanguageCodeInfo language_code_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::language_code_info(this),
        _Internal::language_code_info(this).GetCachedSize(), target, stream);
  }

  // repeated .i18n.phonenumbers.CountriesInfo countries_info = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_countries_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_countries_info().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 countries = 5;
  for (int i = 0, n = this->_internal_countries_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_countries().Get(i), target);
  }

  // required .i18n.phonenumbers.CountryCodeInfo country_code_info = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::country_code_info(this),
        _Internal::country_code_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:i18n.phonenumbers.GeocodingInfo)
  return target;
}

::size_t GeocodingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.GeocodingInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .i18n.phonenumbers.PrefixesInfo prefixes_info = 1;
  total_size += 1UL * this->_internal_prefixes_info_size();
  for (const auto& msg : this->_internal_prefixes_info()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated string languages = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_languages().size());
  for (int i = 0, n = _internal_languages().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_languages().Get(i));
  }
  // repeated .i18n.phonenumbers.CountriesInfo countries_info = 4;
  total_size += 1UL * this->_internal_countries_info_size();
  for (const auto& msg : this->_internal_countries_info()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated int32 countries = 5;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_countries())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_countries_size());
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // required .i18n.phonenumbers.LanguageCodeInfo language_code_info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.language_code_info_);
    }

    // required .i18n.phonenumbers.CountryCodeInfo country_code_info = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.country_code_info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void GeocodingInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GeocodingInfo*>(
      &from));
}

void GeocodingInfo::MergeFrom(const GeocodingInfo& from) {
  GeocodingInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.GeocodingInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_prefixes_info()->MergeFrom(
      from._internal_prefixes_info());
  _this->_internal_mutable_languages()->MergeFrom(from._internal_languages());
  _this->_internal_mutable_countries_info()->MergeFrom(
      from._internal_countries_info());
  _this->_internal_mutable_countries()->MergeFrom(from._internal_countries());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_language_code_info()->::i18n::phonenumbers::LanguageCodeInfo::MergeFrom(
          from._internal_language_code_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_country_code_info()->::i18n::phonenumbers::CountryCodeInfo::MergeFrom(
          from._internal_country_code_info());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GeocodingInfo::CopyFrom(const GeocodingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.GeocodingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GeocodingInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(_internal_prefixes_info()))
    return false;
  if (!::google::protobuf::internal::AllAreInitialized(_internal_countries_info()))
    return false;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.language_code_info_->IsInitialized()) return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!_impl_.country_code_info_->IsInitialized()) return false;
  }
  return true;
}

::_pbi::CachedSize* GeocodingInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GeocodingInfo::InternalSwap(GeocodingInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.prefixes_info_.InternalSwap(&other->_impl_.prefixes_info_);
  _impl_.languages_.InternalSwap(&other->_impl_.languages_);
  _impl_.countries_info_.InternalSwap(&other->_impl_.countries_info_);
  _impl_.countries_.InternalSwap(&other->_impl_.countries_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeocodingInfo, _impl_.country_code_info_)
      + sizeof(GeocodingInfo::_impl_.country_code_info_)
      - PROTOBUF_FIELD_OFFSET(GeocodingInfo, _impl_.language_code_info_)>(
          reinterpret_cast<char*>(&_impl_.language_code_info_),
          reinterpret_cast<char*>(&other->_impl_.language_code_info_));
}

std::string GeocodingInfo::GetTypeName() const {
  return "i18n.phonenumbers.GeocodingInfo";
}

// ===================================================================

class PrefixesInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PrefixesInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PrefixesInfo, _impl_._has_bits_);
  static void set_has_prefixes_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lengths_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PrefixesInfo::PrefixesInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:i18n.phonenumbers.PrefixesInfo)
}
inline PROTOBUF_NDEBUG_INLINE PrefixesInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        prefixes_{visibility, arena, from.prefixes_},
        descriptions_{visibility, arena, from.descriptions_},
        lengths_{visibility, arena, from.lengths_} {}

PrefixesInfo::PrefixesInfo(
    ::google::protobuf::Arena* arena,
    const PrefixesInfo& from)
    : ::google::protobuf::MessageLite(arena) {
  PrefixesInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, prefixes_num_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, prefixes_num_),
           offsetof(Impl_, lengths_num_) -
               offsetof(Impl_, prefixes_num_) +
               sizeof(Impl_::lengths_num_));

  // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.PrefixesInfo)
}
inline PROTOBUF_NDEBUG_INLINE PrefixesInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        prefixes_{visibility, arena},
        descriptions_{visibility, arena},
        lengths_{visibility, arena} {}

inline void PrefixesInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, prefixes_num_),
           0,
           offsetof(Impl_, lengths_num_) -
               offsetof(Impl_, prefixes_num_) +
               sizeof(Impl_::lengths_num_));
}
PrefixesInfo::~PrefixesInfo() {
  // @@protoc_insertion_point(destructor:i18n.phonenumbers.PrefixesInfo)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void PrefixesInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PrefixesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.PrefixesInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prefixes_.Clear();
  _impl_.descriptions_.Clear();
  _impl_.lengths_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.prefixes_num_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.lengths_num_) -
        reinterpret_cast<char*>(&_impl_.prefixes_num_)) + sizeof(_impl_.lengths_num_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PrefixesInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> PrefixesInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PrefixesInfo, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PrefixesInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required int32 prefixes_num = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(PrefixesInfo, _impl_.prefixes_num_)}},
    // repeated int32 prefixes = 2;
    {::_pbi::TcParser::FastV32R1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PrefixesInfo, _impl_.prefixes_)}},
    // repeated string descriptions = 3;
    {::_pbi::TcParser::FastBR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PrefixesInfo, _impl_.descriptions_)}},
    // required int32 lengths_num = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 1, 0, PROTOBUF_FIELD_OFFSET(PrefixesInfo, _impl_.lengths_num_)}},
    // repeated int32 lengths = 5;
    {::_pbi::TcParser::FastV32R1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(PrefixesInfo, _impl_.lengths_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required int32 prefixes_num = 1;
    {PROTOBUF_FIELD_OFFSET(PrefixesInfo, _impl_.prefixes_num_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated int32 prefixes = 2;
    {PROTOBUF_FIELD_OFFSET(PrefixesInfo, _impl_.prefixes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kInt32)},
    // repeated string descriptions = 3;
    {PROTOBUF_FIELD_OFFSET(PrefixesInfo, _impl_.descriptions_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // required int32 lengths_num = 4;
    {PROTOBUF_FIELD_OFFSET(PrefixesInfo, _impl_.lengths_num_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated int32 lengths = 5;
    {PROTOBUF_FIELD_OFFSET(PrefixesInfo, _impl_.lengths_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* PrefixesInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:i18n.phonenumbers.PrefixesInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 prefixes_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_prefixes_num(), target);
  }

  // repeated int32 prefixes = 2;
  for (int i = 0, n = this->_internal_prefixes_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_prefixes().Get(i), target);
  }

  // repeated string descriptions = 3;
  for (int i = 0, n = this->_internal_descriptions_size(); i < n; ++i) {
    const auto& s = this->_internal_descriptions().Get(i);
    target = stream->WriteString(3, s, target);
  }

  // required int32 lengths_num = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_lengths_num(), target);
  }

  // repeated int32 lengths = 5;
  for (int i = 0, n = this->_internal_lengths_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_lengths().Get(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:i18n.phonenumbers.PrefixesInfo)
  return target;
}

::size_t PrefixesInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.PrefixesInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 prefixes = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_prefixes())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_prefixes_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated string descriptions = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_descriptions().size());
  for (int i = 0, n = _internal_descriptions().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_descriptions().Get(i));
  }
  // repeated int32 lengths = 5;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_lengths())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_lengths_size());
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // required int32 prefixes_num = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_prefixes_num());
    }

    // required int32 lengths_num = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_lengths_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void PrefixesInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PrefixesInfo*>(
      &from));
}

void PrefixesInfo::MergeFrom(const PrefixesInfo& from) {
  PrefixesInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.PrefixesInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_prefixes()->MergeFrom(from._internal_prefixes());
  _this->_internal_mutable_descriptions()->MergeFrom(from._internal_descriptions());
  _this->_internal_mutable_lengths()->MergeFrom(from._internal_lengths());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.prefixes_num_ = from._impl_.prefixes_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lengths_num_ = from._impl_.lengths_num_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PrefixesInfo::CopyFrom(const PrefixesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.PrefixesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PrefixesInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

::_pbi::CachedSize* PrefixesInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PrefixesInfo::InternalSwap(PrefixesInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.prefixes_.InternalSwap(&other->_impl_.prefixes_);
  _impl_.descriptions_.InternalSwap(&other->_impl_.descriptions_);
  _impl_.lengths_.InternalSwap(&other->_impl_.lengths_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrefixesInfo, _impl_.lengths_num_)
      + sizeof(PrefixesInfo::_impl_.lengths_num_)
      - PROTOBUF_FIELD_OFFSET(PrefixesInfo, _impl_.prefixes_num_)>(
          reinterpret_cast<char*>(&_impl_.prefixes_num_),
          reinterpret_cast<char*>(&other->_impl_.prefixes_num_));
}

std::string PrefixesInfo::GetTypeName() const {
  return "i18n.phonenumbers.PrefixesInfo";
}

// ===================================================================

class LanguageCodeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<LanguageCodeInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LanguageCodeInfo, _impl_._has_bits_);
  static void set_has_language_codes_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

LanguageCodeInfo::LanguageCodeInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:i18n.phonenumbers.LanguageCodeInfo)
}
inline PROTOBUF_NDEBUG_INLINE LanguageCodeInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        language_codes_{visibility, arena, from.language_codes_} {}

LanguageCodeInfo::LanguageCodeInfo(
    ::google::protobuf::Arena* arena,
    const LanguageCodeInfo& from)
    : ::google::protobuf::MessageLite(arena) {
  LanguageCodeInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.language_codes_num_ = from._impl_.language_codes_num_;

  // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.LanguageCodeInfo)
}
inline PROTOBUF_NDEBUG_INLINE LanguageCodeInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        language_codes_{visibility, arena} {}

inline void LanguageCodeInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.language_codes_num_ = {};
}
LanguageCodeInfo::~LanguageCodeInfo() {
  // @@protoc_insertion_point(destructor:i18n.phonenumbers.LanguageCodeInfo)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void LanguageCodeInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LanguageCodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.LanguageCodeInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.language_codes_.Clear();
  _impl_.language_codes_num_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LanguageCodeInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> LanguageCodeInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LanguageCodeInfo, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LanguageCodeInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated string language_codes = 2;
    {::_pbi::TcParser::FastBR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LanguageCodeInfo, _impl_.language_codes_)}},
    // required int32 language_codes_num = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(LanguageCodeInfo, _impl_.language_codes_num_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required int32 language_codes_num = 1;
    {PROTOBUF_FIELD_OFFSET(LanguageCodeInfo, _impl_.language_codes_num_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated string language_codes = 2;
    {PROTOBUF_FIELD_OFFSET(LanguageCodeInfo, _impl_.language_codes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* LanguageCodeInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:i18n.phonenumbers.LanguageCodeInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 language_codes_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_language_codes_num(), target);
  }

  // repeated string language_codes = 2;
  for (int i = 0, n = this->_internal_language_codes_size(); i < n; ++i) {
    const auto& s = this->_internal_language_codes().Get(i);
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:i18n.phonenumbers.LanguageCodeInfo)
  return target;
}

::size_t LanguageCodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.LanguageCodeInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string language_codes = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_language_codes().size());
  for (int i = 0, n = _internal_language_codes().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_language_codes().Get(i));
  }
  // required int32 language_codes_num = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_language_codes_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void LanguageCodeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LanguageCodeInfo*>(
      &from));
}

void LanguageCodeInfo::MergeFrom(const LanguageCodeInfo& from) {
  LanguageCodeInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.LanguageCodeInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_language_codes()->MergeFrom(from._internal_language_codes());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_language_codes_num(from._internal_language_codes_num());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LanguageCodeInfo::CopyFrom(const LanguageCodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.LanguageCodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LanguageCodeInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

::_pbi::CachedSize* LanguageCodeInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LanguageCodeInfo::InternalSwap(LanguageCodeInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.language_codes_.InternalSwap(&other->_impl_.language_codes_);
        swap(_impl_.language_codes_num_, other->_impl_.language_codes_num_);
}

std::string LanguageCodeInfo::GetTypeName() const {
  return "i18n.phonenumbers.LanguageCodeInfo";
}

// ===================================================================

class CountriesInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CountriesInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CountriesInfo, _impl_._has_bits_);
  static void set_has_country_languages_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CountriesInfo::CountriesInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:i18n.phonenumbers.CountriesInfo)
}
inline PROTOBUF_NDEBUG_INLINE CountriesInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        country_languages_{visibility, arena, from.country_languages_} {}

CountriesInfo::CountriesInfo(
    ::google::protobuf::Arena* arena,
    const CountriesInfo& from)
    : ::google::protobuf::MessageLite(arena) {
  CountriesInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.country_languages_num_ = from._impl_.country_languages_num_;

  // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.CountriesInfo)
}
inline PROTOBUF_NDEBUG_INLINE CountriesInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        country_languages_{visibility, arena} {}

inline void CountriesInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.country_languages_num_ = {};
}
CountriesInfo::~CountriesInfo() {
  // @@protoc_insertion_point(destructor:i18n.phonenumbers.CountriesInfo)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void CountriesInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CountriesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.CountriesInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.country_languages_.Clear();
  _impl_.country_languages_num_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CountriesInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> CountriesInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CountriesInfo, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CountriesInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated string country_languages = 2;
    {::_pbi::TcParser::FastBR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CountriesInfo, _impl_.country_languages_)}},
    // required int32 country_languages_num = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CountriesInfo, _impl_.country_languages_num_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required int32 country_languages_num = 1;
    {PROTOBUF_FIELD_OFFSET(CountriesInfo, _impl_.country_languages_num_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated string country_languages = 2;
    {PROTOBUF_FIELD_OFFSET(CountriesInfo, _impl_.country_languages_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CountriesInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:i18n.phonenumbers.CountriesInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 country_languages_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_country_languages_num(), target);
  }

  // repeated string country_languages = 2;
  for (int i = 0, n = this->_internal_country_languages_size(); i < n; ++i) {
    const auto& s = this->_internal_country_languages().Get(i);
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:i18n.phonenumbers.CountriesInfo)
  return target;
}

::size_t CountriesInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.CountriesInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string country_languages = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_country_languages().size());
  for (int i = 0, n = _internal_country_languages().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_country_languages().Get(i));
  }
  // required int32 country_languages_num = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_country_languages_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void CountriesInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CountriesInfo*>(
      &from));
}

void CountriesInfo::MergeFrom(const CountriesInfo& from) {
  CountriesInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.CountriesInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_country_languages()->MergeFrom(from._internal_country_languages());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_country_languages_num(from._internal_country_languages_num());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CountriesInfo::CopyFrom(const CountriesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.CountriesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CountriesInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

::_pbi::CachedSize* CountriesInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CountriesInfo::InternalSwap(CountriesInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.country_languages_.InternalSwap(&other->_impl_.country_languages_);
        swap(_impl_.country_languages_num_, other->_impl_.country_languages_num_);
}

std::string CountriesInfo::GetTypeName() const {
  return "i18n.phonenumbers.CountriesInfo";
}

// ===================================================================

class CountryCodeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CountryCodeInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CountryCodeInfo, _impl_._has_bits_);
  static void set_has_country_codes_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CountryCodeInfo::CountryCodeInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:i18n.phonenumbers.CountryCodeInfo)
}
inline PROTOBUF_NDEBUG_INLINE CountryCodeInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        country_codes_{visibility, arena, from.country_codes_} {}

CountryCodeInfo::CountryCodeInfo(
    ::google::protobuf::Arena* arena,
    const CountryCodeInfo& from)
    : ::google::protobuf::MessageLite(arena) {
  CountryCodeInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.country_codes_num_ = from._impl_.country_codes_num_;

  // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.CountryCodeInfo)
}
inline PROTOBUF_NDEBUG_INLINE CountryCodeInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        country_codes_{visibility, arena} {}

inline void CountryCodeInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.country_codes_num_ = {};
}
CountryCodeInfo::~CountryCodeInfo() {
  // @@protoc_insertion_point(destructor:i18n.phonenumbers.CountryCodeInfo)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void CountryCodeInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CountryCodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.CountryCodeInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.country_codes_.Clear();
  _impl_.country_codes_num_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CountryCodeInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> CountryCodeInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CountryCodeInfo, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CountryCodeInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated int32 country_codes = 2;
    {::_pbi::TcParser::FastV32R1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CountryCodeInfo, _impl_.country_codes_)}},
    // required int32 country_codes_num = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CountryCodeInfo, _impl_.country_codes_num_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required int32 country_codes_num = 1;
    {PROTOBUF_FIELD_OFFSET(CountryCodeInfo, _impl_.country_codes_num_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated int32 country_codes = 2;
    {PROTOBUF_FIELD_OFFSET(CountryCodeInfo, _impl_.country_codes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CountryCodeInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:i18n.phonenumbers.CountryCodeInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 country_codes_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_country_codes_num(), target);
  }

  // repeated int32 country_codes = 2;
  for (int i = 0, n = this->_internal_country_codes_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_country_codes().Get(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:i18n.phonenumbers.CountryCodeInfo)
  return target;
}

::size_t CountryCodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.CountryCodeInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 country_codes = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_country_codes())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_country_codes_size());
    ;
    total_size += tag_size + data_size;
  }
  // required int32 country_codes_num = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_country_codes_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void CountryCodeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CountryCodeInfo*>(
      &from));
}

void CountryCodeInfo::MergeFrom(const CountryCodeInfo& from) {
  CountryCodeInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.CountryCodeInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_country_codes()->MergeFrom(from._internal_country_codes());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_country_codes_num(from._internal_country_codes_num());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CountryCodeInfo::CopyFrom(const CountryCodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.CountryCodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CountryCodeInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

::_pbi::CachedSize* CountryCodeInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CountryCodeInfo::InternalSwap(CountryCodeInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.country_codes_.InternalSwap(&other->_impl_.country_codes_);
        swap(_impl_.country_codes_num_, other->_impl_.country_codes_num_);
}

std::string CountryCodeInfo::GetTypeName() const {
  return "i18n.phonenumbers.CountryCodeInfo";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace phonenumbers
}  // namespace i18n
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
