// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geocoding_data.proto
// Protobuf C++ Version: 4.25.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_geocoding_5fdata_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_geocoding_5fdata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_geocoding_5fdata_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_geocoding_5fdata_2eproto {
  static const ::uint32_t offsets[];
};
namespace i18n {
namespace phonenumbers {
class CountriesInfo;
struct CountriesInfoDefaultTypeInternal;
extern CountriesInfoDefaultTypeInternal _CountriesInfo_default_instance_;
class CountryCodeInfo;
struct CountryCodeInfoDefaultTypeInternal;
extern CountryCodeInfoDefaultTypeInternal _CountryCodeInfo_default_instance_;
class GeocodingInfo;
struct GeocodingInfoDefaultTypeInternal;
extern GeocodingInfoDefaultTypeInternal _GeocodingInfo_default_instance_;
class LanguageCodeInfo;
struct LanguageCodeInfoDefaultTypeInternal;
extern LanguageCodeInfoDefaultTypeInternal _LanguageCodeInfo_default_instance_;
class PrefixesInfo;
struct PrefixesInfoDefaultTypeInternal;
extern PrefixesInfoDefaultTypeInternal _PrefixesInfo_default_instance_;
}  // namespace phonenumbers
}  // namespace i18n
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace i18n {
namespace phonenumbers {

// ===================================================================


// -------------------------------------------------------------------

class PrefixesInfo final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:i18n.phonenumbers.PrefixesInfo) */ {
 public:
  inline PrefixesInfo() : PrefixesInfo(nullptr) {}
  ~PrefixesInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PrefixesInfo(::google::protobuf::internal::ConstantInitialized);

  inline PrefixesInfo(const PrefixesInfo& from)
      : PrefixesInfo(nullptr, from) {}
  PrefixesInfo(PrefixesInfo&& from) noexcept
    : PrefixesInfo() {
    *this = ::std::move(from);
  }

  inline PrefixesInfo& operator=(const PrefixesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrefixesInfo& operator=(PrefixesInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PrefixesInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrefixesInfo* internal_default_instance() {
    return reinterpret_cast<const PrefixesInfo*>(
               &_PrefixesInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PrefixesInfo& a, PrefixesInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PrefixesInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrefixesInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrefixesInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrefixesInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const PrefixesInfo& from);
  void MergeFrom(const PrefixesInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PrefixesInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "i18n.phonenumbers.PrefixesInfo";
  }
  protected:
  explicit PrefixesInfo(::google::protobuf::Arena* arena);
  PrefixesInfo(::google::protobuf::Arena* arena, const PrefixesInfo& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixesFieldNumber = 2,
    kDescriptionsFieldNumber = 3,
    kLengthsFieldNumber = 5,
    kPrefixesNumFieldNumber = 1,
    kLengthsNumFieldNumber = 4,
  };
  // repeated int32 prefixes = 2;
  int prefixes_size() const;
  private:
  int _internal_prefixes_size() const;

  public:
  void clear_prefixes() ;
  ::int32_t prefixes(int index) const;
  void set_prefixes(int index, ::int32_t value);
  void add_prefixes(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& prefixes() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_prefixes();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_prefixes() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_prefixes();

  public:
  // repeated string descriptions = 3;
  int descriptions_size() const;
  private:
  int _internal_descriptions_size() const;

  public:
  void clear_descriptions() ;
  const std::string& descriptions(int index) const;
  std::string* mutable_descriptions(int index);
  void set_descriptions(int index, const std::string& value);
  void set_descriptions(int index, std::string&& value);
  void set_descriptions(int index, const char* value);
  void set_descriptions(int index, const char* value, std::size_t size);
  void set_descriptions(int index, absl::string_view value);
  std::string* add_descriptions();
  void add_descriptions(const std::string& value);
  void add_descriptions(std::string&& value);
  void add_descriptions(const char* value);
  void add_descriptions(const char* value, std::size_t size);
  void add_descriptions(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& descriptions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_descriptions();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_descriptions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_descriptions();

  public:
  // repeated int32 lengths = 5;
  int lengths_size() const;
  private:
  int _internal_lengths_size() const;

  public:
  void clear_lengths() ;
  ::int32_t lengths(int index) const;
  void set_lengths(int index, ::int32_t value);
  void add_lengths(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& lengths() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_lengths();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_lengths() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_lengths();

  public:
  // required int32 prefixes_num = 1;
  bool has_prefixes_num() const;
  void clear_prefixes_num() ;
  ::int32_t prefixes_num() const;
  void set_prefixes_num(::int32_t value);

  private:
  ::int32_t _internal_prefixes_num() const;
  void _internal_set_prefixes_num(::int32_t value);

  public:
  // required int32 lengths_num = 4;
  bool has_lengths_num() const;
  void clear_lengths_num() ;
  ::int32_t lengths_num() const;
  void set_lengths_num(::int32_t value);

  private:
  ::int32_t _internal_lengths_num() const;
  void _internal_set_lengths_num(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:i18n.phonenumbers.PrefixesInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> prefixes_;
    ::google::protobuf::RepeatedPtrField<std::string> descriptions_;
    ::google::protobuf::RepeatedField<::int32_t> lengths_;
    ::int32_t prefixes_num_;
    ::int32_t lengths_num_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geocoding_5fdata_2eproto;
};// -------------------------------------------------------------------

class LanguageCodeInfo final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:i18n.phonenumbers.LanguageCodeInfo) */ {
 public:
  inline LanguageCodeInfo() : LanguageCodeInfo(nullptr) {}
  ~LanguageCodeInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LanguageCodeInfo(::google::protobuf::internal::ConstantInitialized);

  inline LanguageCodeInfo(const LanguageCodeInfo& from)
      : LanguageCodeInfo(nullptr, from) {}
  LanguageCodeInfo(LanguageCodeInfo&& from) noexcept
    : LanguageCodeInfo() {
    *this = ::std::move(from);
  }

  inline LanguageCodeInfo& operator=(const LanguageCodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LanguageCodeInfo& operator=(LanguageCodeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LanguageCodeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LanguageCodeInfo* internal_default_instance() {
    return reinterpret_cast<const LanguageCodeInfo*>(
               &_LanguageCodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LanguageCodeInfo& a, LanguageCodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LanguageCodeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LanguageCodeInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LanguageCodeInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LanguageCodeInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const LanguageCodeInfo& from);
  void MergeFrom(const LanguageCodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LanguageCodeInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "i18n.phonenumbers.LanguageCodeInfo";
  }
  protected:
  explicit LanguageCodeInfo(::google::protobuf::Arena* arena);
  LanguageCodeInfo(::google::protobuf::Arena* arena, const LanguageCodeInfo& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageCodesFieldNumber = 2,
    kLanguageCodesNumFieldNumber = 1,
  };
  // repeated string language_codes = 2;
  int language_codes_size() const;
  private:
  int _internal_language_codes_size() const;

  public:
  void clear_language_codes() ;
  const std::string& language_codes(int index) const;
  std::string* mutable_language_codes(int index);
  void set_language_codes(int index, const std::string& value);
  void set_language_codes(int index, std::string&& value);
  void set_language_codes(int index, const char* value);
  void set_language_codes(int index, const char* value, std::size_t size);
  void set_language_codes(int index, absl::string_view value);
  std::string* add_language_codes();
  void add_language_codes(const std::string& value);
  void add_language_codes(std::string&& value);
  void add_language_codes(const char* value);
  void add_language_codes(const char* value, std::size_t size);
  void add_language_codes(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& language_codes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_language_codes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_language_codes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_language_codes();

  public:
  // required int32 language_codes_num = 1;
  bool has_language_codes_num() const;
  void clear_language_codes_num() ;
  ::int32_t language_codes_num() const;
  void set_language_codes_num(::int32_t value);

  private:
  ::int32_t _internal_language_codes_num() const;
  void _internal_set_language_codes_num(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:i18n.phonenumbers.LanguageCodeInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> language_codes_;
    ::int32_t language_codes_num_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geocoding_5fdata_2eproto;
};// -------------------------------------------------------------------

class CountryCodeInfo final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:i18n.phonenumbers.CountryCodeInfo) */ {
 public:
  inline CountryCodeInfo() : CountryCodeInfo(nullptr) {}
  ~CountryCodeInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CountryCodeInfo(::google::protobuf::internal::ConstantInitialized);

  inline CountryCodeInfo(const CountryCodeInfo& from)
      : CountryCodeInfo(nullptr, from) {}
  CountryCodeInfo(CountryCodeInfo&& from) noexcept
    : CountryCodeInfo() {
    *this = ::std::move(from);
  }

  inline CountryCodeInfo& operator=(const CountryCodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CountryCodeInfo& operator=(CountryCodeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CountryCodeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CountryCodeInfo* internal_default_instance() {
    return reinterpret_cast<const CountryCodeInfo*>(
               &_CountryCodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CountryCodeInfo& a, CountryCodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CountryCodeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CountryCodeInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CountryCodeInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CountryCodeInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const CountryCodeInfo& from);
  void MergeFrom(const CountryCodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CountryCodeInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "i18n.phonenumbers.CountryCodeInfo";
  }
  protected:
  explicit CountryCodeInfo(::google::protobuf::Arena* arena);
  CountryCodeInfo(::google::protobuf::Arena* arena, const CountryCodeInfo& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodesFieldNumber = 2,
    kCountryCodesNumFieldNumber = 1,
  };
  // repeated int32 country_codes = 2;
  int country_codes_size() const;
  private:
  int _internal_country_codes_size() const;

  public:
  void clear_country_codes() ;
  ::int32_t country_codes(int index) const;
  void set_country_codes(int index, ::int32_t value);
  void add_country_codes(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& country_codes() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_country_codes();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_country_codes() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_country_codes();

  public:
  // required int32 country_codes_num = 1;
  bool has_country_codes_num() const;
  void clear_country_codes_num() ;
  ::int32_t country_codes_num() const;
  void set_country_codes_num(::int32_t value);

  private:
  ::int32_t _internal_country_codes_num() const;
  void _internal_set_country_codes_num(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:i18n.phonenumbers.CountryCodeInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> country_codes_;
    ::int32_t country_codes_num_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geocoding_5fdata_2eproto;
};// -------------------------------------------------------------------

class CountriesInfo final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:i18n.phonenumbers.CountriesInfo) */ {
 public:
  inline CountriesInfo() : CountriesInfo(nullptr) {}
  ~CountriesInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CountriesInfo(::google::protobuf::internal::ConstantInitialized);

  inline CountriesInfo(const CountriesInfo& from)
      : CountriesInfo(nullptr, from) {}
  CountriesInfo(CountriesInfo&& from) noexcept
    : CountriesInfo() {
    *this = ::std::move(from);
  }

  inline CountriesInfo& operator=(const CountriesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CountriesInfo& operator=(CountriesInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CountriesInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CountriesInfo* internal_default_instance() {
    return reinterpret_cast<const CountriesInfo*>(
               &_CountriesInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CountriesInfo& a, CountriesInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CountriesInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CountriesInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CountriesInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CountriesInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const CountriesInfo& from);
  void MergeFrom(const CountriesInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CountriesInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "i18n.phonenumbers.CountriesInfo";
  }
  protected:
  explicit CountriesInfo(::google::protobuf::Arena* arena);
  CountriesInfo(::google::protobuf::Arena* arena, const CountriesInfo& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryLanguagesFieldNumber = 2,
    kCountryLanguagesNumFieldNumber = 1,
  };
  // repeated string country_languages = 2;
  int country_languages_size() const;
  private:
  int _internal_country_languages_size() const;

  public:
  void clear_country_languages() ;
  const std::string& country_languages(int index) const;
  std::string* mutable_country_languages(int index);
  void set_country_languages(int index, const std::string& value);
  void set_country_languages(int index, std::string&& value);
  void set_country_languages(int index, const char* value);
  void set_country_languages(int index, const char* value, std::size_t size);
  void set_country_languages(int index, absl::string_view value);
  std::string* add_country_languages();
  void add_country_languages(const std::string& value);
  void add_country_languages(std::string&& value);
  void add_country_languages(const char* value);
  void add_country_languages(const char* value, std::size_t size);
  void add_country_languages(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& country_languages() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_country_languages();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_country_languages() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_country_languages();

  public:
  // required int32 country_languages_num = 1;
  bool has_country_languages_num() const;
  void clear_country_languages_num() ;
  ::int32_t country_languages_num() const;
  void set_country_languages_num(::int32_t value);

  private:
  ::int32_t _internal_country_languages_num() const;
  void _internal_set_country_languages_num(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:i18n.phonenumbers.CountriesInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> country_languages_;
    ::int32_t country_languages_num_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geocoding_5fdata_2eproto;
};// -------------------------------------------------------------------

class GeocodingInfo final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:i18n.phonenumbers.GeocodingInfo) */ {
 public:
  inline GeocodingInfo() : GeocodingInfo(nullptr) {}
  ~GeocodingInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GeocodingInfo(::google::protobuf::internal::ConstantInitialized);

  inline GeocodingInfo(const GeocodingInfo& from)
      : GeocodingInfo(nullptr, from) {}
  GeocodingInfo(GeocodingInfo&& from) noexcept
    : GeocodingInfo() {
    *this = ::std::move(from);
  }

  inline GeocodingInfo& operator=(const GeocodingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeocodingInfo& operator=(GeocodingInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GeocodingInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeocodingInfo* internal_default_instance() {
    return reinterpret_cast<const GeocodingInfo*>(
               &_GeocodingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GeocodingInfo& a, GeocodingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GeocodingInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeocodingInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeocodingInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GeocodingInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const GeocodingInfo& from);
  void MergeFrom(const GeocodingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GeocodingInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "i18n.phonenumbers.GeocodingInfo";
  }
  protected:
  explicit GeocodingInfo(::google::protobuf::Arena* arena);
  GeocodingInfo(::google::protobuf::Arena* arena, const GeocodingInfo& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixesInfoFieldNumber = 1,
    kLanguagesFieldNumber = 2,
    kCountriesInfoFieldNumber = 4,
    kCountriesFieldNumber = 5,
    kLanguageCodeInfoFieldNumber = 3,
    kCountryCodeInfoFieldNumber = 6,
  };
  // repeated .i18n.phonenumbers.PrefixesInfo prefixes_info = 1;
  int prefixes_info_size() const;
  private:
  int _internal_prefixes_info_size() const;

  public:
  void clear_prefixes_info() ;
  ::i18n::phonenumbers::PrefixesInfo* mutable_prefixes_info(int index);
  ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::PrefixesInfo >*
      mutable_prefixes_info();
  private:
  const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::PrefixesInfo>& _internal_prefixes_info() const;
  ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::PrefixesInfo>* _internal_mutable_prefixes_info();
  public:
  const ::i18n::phonenumbers::PrefixesInfo& prefixes_info(int index) const;
  ::i18n::phonenumbers::PrefixesInfo* add_prefixes_info();
  const ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::PrefixesInfo >&
      prefixes_info() const;
  // repeated string languages = 2;
  int languages_size() const;
  private:
  int _internal_languages_size() const;

  public:
  void clear_languages() ;
  const std::string& languages(int index) const;
  std::string* mutable_languages(int index);
  void set_languages(int index, const std::string& value);
  void set_languages(int index, std::string&& value);
  void set_languages(int index, const char* value);
  void set_languages(int index, const char* value, std::size_t size);
  void set_languages(int index, absl::string_view value);
  std::string* add_languages();
  void add_languages(const std::string& value);
  void add_languages(std::string&& value);
  void add_languages(const char* value);
  void add_languages(const char* value, std::size_t size);
  void add_languages(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& languages() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_languages();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_languages() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_languages();

  public:
  // repeated .i18n.phonenumbers.CountriesInfo countries_info = 4;
  int countries_info_size() const;
  private:
  int _internal_countries_info_size() const;

  public:
  void clear_countries_info() ;
  ::i18n::phonenumbers::CountriesInfo* mutable_countries_info(int index);
  ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::CountriesInfo >*
      mutable_countries_info();
  private:
  const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::CountriesInfo>& _internal_countries_info() const;
  ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::CountriesInfo>* _internal_mutable_countries_info();
  public:
  const ::i18n::phonenumbers::CountriesInfo& countries_info(int index) const;
  ::i18n::phonenumbers::CountriesInfo* add_countries_info();
  const ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::CountriesInfo >&
      countries_info() const;
  // repeated int32 countries = 5;
  int countries_size() const;
  private:
  int _internal_countries_size() const;

  public:
  void clear_countries() ;
  ::int32_t countries(int index) const;
  void set_countries(int index, ::int32_t value);
  void add_countries(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& countries() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_countries();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_countries() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_countries();

  public:
  // required .i18n.phonenumbers.LanguageCodeInfo language_code_info = 3;
  bool has_language_code_info() const;
  void clear_language_code_info() ;
  const ::i18n::phonenumbers::LanguageCodeInfo& language_code_info() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::LanguageCodeInfo* release_language_code_info();
  ::i18n::phonenumbers::LanguageCodeInfo* mutable_language_code_info();
  void set_allocated_language_code_info(::i18n::phonenumbers::LanguageCodeInfo* value);
  void unsafe_arena_set_allocated_language_code_info(::i18n::phonenumbers::LanguageCodeInfo* value);
  ::i18n::phonenumbers::LanguageCodeInfo* unsafe_arena_release_language_code_info();

  private:
  const ::i18n::phonenumbers::LanguageCodeInfo& _internal_language_code_info() const;
  ::i18n::phonenumbers::LanguageCodeInfo* _internal_mutable_language_code_info();

  public:
  // required .i18n.phonenumbers.CountryCodeInfo country_code_info = 6;
  bool has_country_code_info() const;
  void clear_country_code_info() ;
  const ::i18n::phonenumbers::CountryCodeInfo& country_code_info() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::CountryCodeInfo* release_country_code_info();
  ::i18n::phonenumbers::CountryCodeInfo* mutable_country_code_info();
  void set_allocated_country_code_info(::i18n::phonenumbers::CountryCodeInfo* value);
  void unsafe_arena_set_allocated_country_code_info(::i18n::phonenumbers::CountryCodeInfo* value);
  ::i18n::phonenumbers::CountryCodeInfo* unsafe_arena_release_country_code_info();

  private:
  const ::i18n::phonenumbers::CountryCodeInfo& _internal_country_code_info() const;
  ::i18n::phonenumbers::CountryCodeInfo* _internal_mutable_country_code_info();

  public:
  // @@protoc_insertion_point(class_scope:i18n.phonenumbers.GeocodingInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::PrefixesInfo > prefixes_info_;
    ::google::protobuf::RepeatedPtrField<std::string> languages_;
    ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::CountriesInfo > countries_info_;
    ::google::protobuf::RepeatedField<::int32_t> countries_;
    ::i18n::phonenumbers::LanguageCodeInfo* language_code_info_;
    ::i18n::phonenumbers::CountryCodeInfo* country_code_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geocoding_5fdata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GeocodingInfo

// repeated .i18n.phonenumbers.PrefixesInfo prefixes_info = 1;
inline int GeocodingInfo::_internal_prefixes_info_size() const {
  return _internal_prefixes_info().size();
}
inline int GeocodingInfo::prefixes_info_size() const {
  return _internal_prefixes_info_size();
}
inline void GeocodingInfo::clear_prefixes_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prefixes_info_.Clear();
}
inline ::i18n::phonenumbers::PrefixesInfo* GeocodingInfo::mutable_prefixes_info(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.GeocodingInfo.prefixes_info)
  return _internal_mutable_prefixes_info()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::PrefixesInfo>* GeocodingInfo::mutable_prefixes_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.GeocodingInfo.prefixes_info)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_prefixes_info();
}
inline const ::i18n::phonenumbers::PrefixesInfo& GeocodingInfo::prefixes_info(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.GeocodingInfo.prefixes_info)
  return _internal_prefixes_info().Get(index);
}
inline ::i18n::phonenumbers::PrefixesInfo* GeocodingInfo::add_prefixes_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::i18n::phonenumbers::PrefixesInfo* _add = _internal_mutable_prefixes_info()->Add();
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.GeocodingInfo.prefixes_info)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::PrefixesInfo>& GeocodingInfo::prefixes_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.GeocodingInfo.prefixes_info)
  return _internal_prefixes_info();
}
inline const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::PrefixesInfo>&
GeocodingInfo::_internal_prefixes_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.prefixes_info_;
}
inline ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::PrefixesInfo>*
GeocodingInfo::_internal_mutable_prefixes_info() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.prefixes_info_;
}

// repeated string languages = 2;
inline int GeocodingInfo::_internal_languages_size() const {
  return _internal_languages().size();
}
inline int GeocodingInfo::languages_size() const {
  return _internal_languages_size();
}
inline void GeocodingInfo::clear_languages() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.languages_.Clear();
}
inline std::string* GeocodingInfo::add_languages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_languages()->Add();
  // @@protoc_insertion_point(field_add_mutable:i18n.phonenumbers.GeocodingInfo.languages)
  return _s;
}
inline const std::string& GeocodingInfo::languages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.GeocodingInfo.languages)
  return _internal_languages().Get(index);
}
inline std::string* GeocodingInfo::mutable_languages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.GeocodingInfo.languages)
  return _internal_mutable_languages()->Mutable(index);
}
inline void GeocodingInfo::set_languages(int index, const std::string& value) {
  _internal_mutable_languages()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.GeocodingInfo.languages)
}
inline void GeocodingInfo::set_languages(int index, std::string&& value) {
  _internal_mutable_languages()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.GeocodingInfo.languages)
}
inline void GeocodingInfo::set_languages(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_languages()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.GeocodingInfo.languages)
}
inline void GeocodingInfo::set_languages(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_languages()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.GeocodingInfo.languages)
}
inline void GeocodingInfo::set_languages(int index, absl::string_view value) {
  _internal_mutable_languages()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:i18n.phonenumbers.GeocodingInfo.languages)
}
inline void GeocodingInfo::add_languages(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_languages()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.GeocodingInfo.languages)
}
inline void GeocodingInfo::add_languages(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_languages()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.GeocodingInfo.languages)
}
inline void GeocodingInfo::add_languages(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_languages()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:i18n.phonenumbers.GeocodingInfo.languages)
}
inline void GeocodingInfo::add_languages(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_languages()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:i18n.phonenumbers.GeocodingInfo.languages)
}
inline void GeocodingInfo::add_languages(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_languages()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:i18n.phonenumbers.GeocodingInfo.languages)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GeocodingInfo::languages() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.GeocodingInfo.languages)
  return _internal_languages();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GeocodingInfo::mutable_languages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.GeocodingInfo.languages)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_languages();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GeocodingInfo::_internal_languages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.languages_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GeocodingInfo::_internal_mutable_languages() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.languages_;
}

// required .i18n.phonenumbers.LanguageCodeInfo language_code_info = 3;
inline bool GeocodingInfo::has_language_code_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.language_code_info_ != nullptr);
  return value;
}
inline void GeocodingInfo::clear_language_code_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.language_code_info_ != nullptr) _impl_.language_code_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::i18n::phonenumbers::LanguageCodeInfo& GeocodingInfo::_internal_language_code_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::LanguageCodeInfo* p = _impl_.language_code_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::LanguageCodeInfo&>(::i18n::phonenumbers::_LanguageCodeInfo_default_instance_);
}
inline const ::i18n::phonenumbers::LanguageCodeInfo& GeocodingInfo::language_code_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.GeocodingInfo.language_code_info)
  return _internal_language_code_info();
}
inline void GeocodingInfo::unsafe_arena_set_allocated_language_code_info(::i18n::phonenumbers::LanguageCodeInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.language_code_info_);
  }
  _impl_.language_code_info_ = reinterpret_cast<::i18n::phonenumbers::LanguageCodeInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.GeocodingInfo.language_code_info)
}
inline ::i18n::phonenumbers::LanguageCodeInfo* GeocodingInfo::release_language_code_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::i18n::phonenumbers::LanguageCodeInfo* released = _impl_.language_code_info_;
  _impl_.language_code_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::LanguageCodeInfo* GeocodingInfo::unsafe_arena_release_language_code_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.GeocodingInfo.language_code_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::i18n::phonenumbers::LanguageCodeInfo* temp = _impl_.language_code_info_;
  _impl_.language_code_info_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::LanguageCodeInfo* GeocodingInfo::_internal_mutable_language_code_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.language_code_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::LanguageCodeInfo>(GetArena());
    _impl_.language_code_info_ = reinterpret_cast<::i18n::phonenumbers::LanguageCodeInfo*>(p);
  }
  return _impl_.language_code_info_;
}
inline ::i18n::phonenumbers::LanguageCodeInfo* GeocodingInfo::mutable_language_code_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::LanguageCodeInfo* _msg = _internal_mutable_language_code_info();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.GeocodingInfo.language_code_info)
  return _msg;
}
inline void GeocodingInfo::set_allocated_language_code_info(::i18n::phonenumbers::LanguageCodeInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::LanguageCodeInfo*>(_impl_.language_code_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::LanguageCodeInfo*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.language_code_info_ = reinterpret_cast<::i18n::phonenumbers::LanguageCodeInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.GeocodingInfo.language_code_info)
}

// repeated .i18n.phonenumbers.CountriesInfo countries_info = 4;
inline int GeocodingInfo::_internal_countries_info_size() const {
  return _internal_countries_info().size();
}
inline int GeocodingInfo::countries_info_size() const {
  return _internal_countries_info_size();
}
inline void GeocodingInfo::clear_countries_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.countries_info_.Clear();
}
inline ::i18n::phonenumbers::CountriesInfo* GeocodingInfo::mutable_countries_info(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.GeocodingInfo.countries_info)
  return _internal_mutable_countries_info()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::CountriesInfo>* GeocodingInfo::mutable_countries_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.GeocodingInfo.countries_info)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_countries_info();
}
inline const ::i18n::phonenumbers::CountriesInfo& GeocodingInfo::countries_info(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.GeocodingInfo.countries_info)
  return _internal_countries_info().Get(index);
}
inline ::i18n::phonenumbers::CountriesInfo* GeocodingInfo::add_countries_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::i18n::phonenumbers::CountriesInfo* _add = _internal_mutable_countries_info()->Add();
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.GeocodingInfo.countries_info)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::CountriesInfo>& GeocodingInfo::countries_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.GeocodingInfo.countries_info)
  return _internal_countries_info();
}
inline const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::CountriesInfo>&
GeocodingInfo::_internal_countries_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.countries_info_;
}
inline ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::CountriesInfo>*
GeocodingInfo::_internal_mutable_countries_info() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.countries_info_;
}

// repeated int32 countries = 5;
inline int GeocodingInfo::_internal_countries_size() const {
  return _internal_countries().size();
}
inline int GeocodingInfo::countries_size() const {
  return _internal_countries_size();
}
inline void GeocodingInfo::clear_countries() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.countries_.Clear();
}
inline ::int32_t GeocodingInfo::countries(int index) const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.GeocodingInfo.countries)
  return _internal_countries().Get(index);
}
inline void GeocodingInfo::set_countries(int index, ::int32_t value) {
  _internal_mutable_countries()->Set(index, value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.GeocodingInfo.countries)
}
inline void GeocodingInfo::add_countries(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_countries()->Add(value);
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.GeocodingInfo.countries)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& GeocodingInfo::countries() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.GeocodingInfo.countries)
  return _internal_countries();
}
inline ::google::protobuf::RepeatedField<::int32_t>* GeocodingInfo::mutable_countries()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.GeocodingInfo.countries)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_countries();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& GeocodingInfo::_internal_countries()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.countries_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* GeocodingInfo::_internal_mutable_countries() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.countries_;
}

// required .i18n.phonenumbers.CountryCodeInfo country_code_info = 6;
inline bool GeocodingInfo::has_country_code_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.country_code_info_ != nullptr);
  return value;
}
inline void GeocodingInfo::clear_country_code_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.country_code_info_ != nullptr) _impl_.country_code_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::i18n::phonenumbers::CountryCodeInfo& GeocodingInfo::_internal_country_code_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::CountryCodeInfo* p = _impl_.country_code_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::CountryCodeInfo&>(::i18n::phonenumbers::_CountryCodeInfo_default_instance_);
}
inline const ::i18n::phonenumbers::CountryCodeInfo& GeocodingInfo::country_code_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.GeocodingInfo.country_code_info)
  return _internal_country_code_info();
}
inline void GeocodingInfo::unsafe_arena_set_allocated_country_code_info(::i18n::phonenumbers::CountryCodeInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.country_code_info_);
  }
  _impl_.country_code_info_ = reinterpret_cast<::i18n::phonenumbers::CountryCodeInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.GeocodingInfo.country_code_info)
}
inline ::i18n::phonenumbers::CountryCodeInfo* GeocodingInfo::release_country_code_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::i18n::phonenumbers::CountryCodeInfo* released = _impl_.country_code_info_;
  _impl_.country_code_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::CountryCodeInfo* GeocodingInfo::unsafe_arena_release_country_code_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.GeocodingInfo.country_code_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::i18n::phonenumbers::CountryCodeInfo* temp = _impl_.country_code_info_;
  _impl_.country_code_info_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::CountryCodeInfo* GeocodingInfo::_internal_mutable_country_code_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.country_code_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::CountryCodeInfo>(GetArena());
    _impl_.country_code_info_ = reinterpret_cast<::i18n::phonenumbers::CountryCodeInfo*>(p);
  }
  return _impl_.country_code_info_;
}
inline ::i18n::phonenumbers::CountryCodeInfo* GeocodingInfo::mutable_country_code_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::CountryCodeInfo* _msg = _internal_mutable_country_code_info();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.GeocodingInfo.country_code_info)
  return _msg;
}
inline void GeocodingInfo::set_allocated_country_code_info(::i18n::phonenumbers::CountryCodeInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::CountryCodeInfo*>(_impl_.country_code_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::CountryCodeInfo*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.country_code_info_ = reinterpret_cast<::i18n::phonenumbers::CountryCodeInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.GeocodingInfo.country_code_info)
}

// -------------------------------------------------------------------

// PrefixesInfo

// required int32 prefixes_num = 1;
inline bool PrefixesInfo::has_prefixes_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PrefixesInfo::clear_prefixes_num() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prefixes_num_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t PrefixesInfo::prefixes_num() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PrefixesInfo.prefixes_num)
  return _internal_prefixes_num();
}
inline void PrefixesInfo::set_prefixes_num(::int32_t value) {
  _internal_set_prefixes_num(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PrefixesInfo.prefixes_num)
}
inline ::int32_t PrefixesInfo::_internal_prefixes_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.prefixes_num_;
}
inline void PrefixesInfo::_internal_set_prefixes_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.prefixes_num_ = value;
}

// repeated int32 prefixes = 2;
inline int PrefixesInfo::_internal_prefixes_size() const {
  return _internal_prefixes().size();
}
inline int PrefixesInfo::prefixes_size() const {
  return _internal_prefixes_size();
}
inline void PrefixesInfo::clear_prefixes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prefixes_.Clear();
}
inline ::int32_t PrefixesInfo::prefixes(int index) const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PrefixesInfo.prefixes)
  return _internal_prefixes().Get(index);
}
inline void PrefixesInfo::set_prefixes(int index, ::int32_t value) {
  _internal_mutable_prefixes()->Set(index, value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PrefixesInfo.prefixes)
}
inline void PrefixesInfo::add_prefixes(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_prefixes()->Add(value);
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.PrefixesInfo.prefixes)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& PrefixesInfo::prefixes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.PrefixesInfo.prefixes)
  return _internal_prefixes();
}
inline ::google::protobuf::RepeatedField<::int32_t>* PrefixesInfo::mutable_prefixes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PrefixesInfo.prefixes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_prefixes();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& PrefixesInfo::_internal_prefixes()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.prefixes_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* PrefixesInfo::_internal_mutable_prefixes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.prefixes_;
}

// repeated string descriptions = 3;
inline int PrefixesInfo::_internal_descriptions_size() const {
  return _internal_descriptions().size();
}
inline int PrefixesInfo::descriptions_size() const {
  return _internal_descriptions_size();
}
inline void PrefixesInfo::clear_descriptions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.descriptions_.Clear();
}
inline std::string* PrefixesInfo::add_descriptions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_descriptions()->Add();
  // @@protoc_insertion_point(field_add_mutable:i18n.phonenumbers.PrefixesInfo.descriptions)
  return _s;
}
inline const std::string& PrefixesInfo::descriptions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PrefixesInfo.descriptions)
  return _internal_descriptions().Get(index);
}
inline std::string* PrefixesInfo::mutable_descriptions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PrefixesInfo.descriptions)
  return _internal_mutable_descriptions()->Mutable(index);
}
inline void PrefixesInfo::set_descriptions(int index, const std::string& value) {
  _internal_mutable_descriptions()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PrefixesInfo.descriptions)
}
inline void PrefixesInfo::set_descriptions(int index, std::string&& value) {
  _internal_mutable_descriptions()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PrefixesInfo.descriptions)
}
inline void PrefixesInfo::set_descriptions(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_descriptions()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PrefixesInfo.descriptions)
}
inline void PrefixesInfo::set_descriptions(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_descriptions()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PrefixesInfo.descriptions)
}
inline void PrefixesInfo::set_descriptions(int index, absl::string_view value) {
  _internal_mutable_descriptions()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:i18n.phonenumbers.PrefixesInfo.descriptions)
}
inline void PrefixesInfo::add_descriptions(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_descriptions()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.PrefixesInfo.descriptions)
}
inline void PrefixesInfo::add_descriptions(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_descriptions()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.PrefixesInfo.descriptions)
}
inline void PrefixesInfo::add_descriptions(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_descriptions()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:i18n.phonenumbers.PrefixesInfo.descriptions)
}
inline void PrefixesInfo::add_descriptions(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_descriptions()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:i18n.phonenumbers.PrefixesInfo.descriptions)
}
inline void PrefixesInfo::add_descriptions(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_descriptions()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:i18n.phonenumbers.PrefixesInfo.descriptions)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PrefixesInfo::descriptions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.PrefixesInfo.descriptions)
  return _internal_descriptions();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PrefixesInfo::mutable_descriptions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PrefixesInfo.descriptions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_descriptions();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PrefixesInfo::_internal_descriptions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.descriptions_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PrefixesInfo::_internal_mutable_descriptions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.descriptions_;
}

// required int32 lengths_num = 4;
inline bool PrefixesInfo::has_lengths_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PrefixesInfo::clear_lengths_num() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lengths_num_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PrefixesInfo::lengths_num() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PrefixesInfo.lengths_num)
  return _internal_lengths_num();
}
inline void PrefixesInfo::set_lengths_num(::int32_t value) {
  _internal_set_lengths_num(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PrefixesInfo.lengths_num)
}
inline ::int32_t PrefixesInfo::_internal_lengths_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lengths_num_;
}
inline void PrefixesInfo::_internal_set_lengths_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lengths_num_ = value;
}

// repeated int32 lengths = 5;
inline int PrefixesInfo::_internal_lengths_size() const {
  return _internal_lengths().size();
}
inline int PrefixesInfo::lengths_size() const {
  return _internal_lengths_size();
}
inline void PrefixesInfo::clear_lengths() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lengths_.Clear();
}
inline ::int32_t PrefixesInfo::lengths(int index) const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PrefixesInfo.lengths)
  return _internal_lengths().Get(index);
}
inline void PrefixesInfo::set_lengths(int index, ::int32_t value) {
  _internal_mutable_lengths()->Set(index, value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PrefixesInfo.lengths)
}
inline void PrefixesInfo::add_lengths(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_lengths()->Add(value);
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.PrefixesInfo.lengths)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& PrefixesInfo::lengths() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.PrefixesInfo.lengths)
  return _internal_lengths();
}
inline ::google::protobuf::RepeatedField<::int32_t>* PrefixesInfo::mutable_lengths()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PrefixesInfo.lengths)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_lengths();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& PrefixesInfo::_internal_lengths()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lengths_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* PrefixesInfo::_internal_mutable_lengths() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.lengths_;
}

// -------------------------------------------------------------------

// LanguageCodeInfo

// required int32 language_codes_num = 1;
inline bool LanguageCodeInfo::has_language_codes_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LanguageCodeInfo::clear_language_codes_num() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_codes_num_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t LanguageCodeInfo::language_codes_num() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.LanguageCodeInfo.language_codes_num)
  return _internal_language_codes_num();
}
inline void LanguageCodeInfo::set_language_codes_num(::int32_t value) {
  _internal_set_language_codes_num(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.LanguageCodeInfo.language_codes_num)
}
inline ::int32_t LanguageCodeInfo::_internal_language_codes_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_codes_num_;
}
inline void LanguageCodeInfo::_internal_set_language_codes_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.language_codes_num_ = value;
}

// repeated string language_codes = 2;
inline int LanguageCodeInfo::_internal_language_codes_size() const {
  return _internal_language_codes().size();
}
inline int LanguageCodeInfo::language_codes_size() const {
  return _internal_language_codes_size();
}
inline void LanguageCodeInfo::clear_language_codes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_codes_.Clear();
}
inline std::string* LanguageCodeInfo::add_language_codes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_language_codes()->Add();
  // @@protoc_insertion_point(field_add_mutable:i18n.phonenumbers.LanguageCodeInfo.language_codes)
  return _s;
}
inline const std::string& LanguageCodeInfo::language_codes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.LanguageCodeInfo.language_codes)
  return _internal_language_codes().Get(index);
}
inline std::string* LanguageCodeInfo::mutable_language_codes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.LanguageCodeInfo.language_codes)
  return _internal_mutable_language_codes()->Mutable(index);
}
inline void LanguageCodeInfo::set_language_codes(int index, const std::string& value) {
  _internal_mutable_language_codes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.LanguageCodeInfo.language_codes)
}
inline void LanguageCodeInfo::set_language_codes(int index, std::string&& value) {
  _internal_mutable_language_codes()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.LanguageCodeInfo.language_codes)
}
inline void LanguageCodeInfo::set_language_codes(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_language_codes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.LanguageCodeInfo.language_codes)
}
inline void LanguageCodeInfo::set_language_codes(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_language_codes()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.LanguageCodeInfo.language_codes)
}
inline void LanguageCodeInfo::set_language_codes(int index, absl::string_view value) {
  _internal_mutable_language_codes()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:i18n.phonenumbers.LanguageCodeInfo.language_codes)
}
inline void LanguageCodeInfo::add_language_codes(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.LanguageCodeInfo.language_codes)
}
inline void LanguageCodeInfo::add_language_codes(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.LanguageCodeInfo.language_codes)
}
inline void LanguageCodeInfo::add_language_codes(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:i18n.phonenumbers.LanguageCodeInfo.language_codes)
}
inline void LanguageCodeInfo::add_language_codes(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:i18n.phonenumbers.LanguageCodeInfo.language_codes)
}
inline void LanguageCodeInfo::add_language_codes(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:i18n.phonenumbers.LanguageCodeInfo.language_codes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LanguageCodeInfo::language_codes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.LanguageCodeInfo.language_codes)
  return _internal_language_codes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LanguageCodeInfo::mutable_language_codes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.LanguageCodeInfo.language_codes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_language_codes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LanguageCodeInfo::_internal_language_codes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_codes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LanguageCodeInfo::_internal_mutable_language_codes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.language_codes_;
}

// -------------------------------------------------------------------

// CountriesInfo

// required int32 country_languages_num = 1;
inline bool CountriesInfo::has_country_languages_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CountriesInfo::clear_country_languages_num() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_languages_num_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t CountriesInfo::country_languages_num() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.CountriesInfo.country_languages_num)
  return _internal_country_languages_num();
}
inline void CountriesInfo::set_country_languages_num(::int32_t value) {
  _internal_set_country_languages_num(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.CountriesInfo.country_languages_num)
}
inline ::int32_t CountriesInfo::_internal_country_languages_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_languages_num_;
}
inline void CountriesInfo::_internal_set_country_languages_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.country_languages_num_ = value;
}

// repeated string country_languages = 2;
inline int CountriesInfo::_internal_country_languages_size() const {
  return _internal_country_languages().size();
}
inline int CountriesInfo::country_languages_size() const {
  return _internal_country_languages_size();
}
inline void CountriesInfo::clear_country_languages() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_languages_.Clear();
}
inline std::string* CountriesInfo::add_country_languages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_country_languages()->Add();
  // @@protoc_insertion_point(field_add_mutable:i18n.phonenumbers.CountriesInfo.country_languages)
  return _s;
}
inline const std::string& CountriesInfo::country_languages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.CountriesInfo.country_languages)
  return _internal_country_languages().Get(index);
}
inline std::string* CountriesInfo::mutable_country_languages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.CountriesInfo.country_languages)
  return _internal_mutable_country_languages()->Mutable(index);
}
inline void CountriesInfo::set_country_languages(int index, const std::string& value) {
  _internal_mutable_country_languages()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.CountriesInfo.country_languages)
}
inline void CountriesInfo::set_country_languages(int index, std::string&& value) {
  _internal_mutable_country_languages()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.CountriesInfo.country_languages)
}
inline void CountriesInfo::set_country_languages(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_country_languages()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.CountriesInfo.country_languages)
}
inline void CountriesInfo::set_country_languages(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_country_languages()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.CountriesInfo.country_languages)
}
inline void CountriesInfo::set_country_languages(int index, absl::string_view value) {
  _internal_mutable_country_languages()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:i18n.phonenumbers.CountriesInfo.country_languages)
}
inline void CountriesInfo::add_country_languages(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_country_languages()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.CountriesInfo.country_languages)
}
inline void CountriesInfo::add_country_languages(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_country_languages()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.CountriesInfo.country_languages)
}
inline void CountriesInfo::add_country_languages(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_country_languages()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:i18n.phonenumbers.CountriesInfo.country_languages)
}
inline void CountriesInfo::add_country_languages(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_country_languages()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:i18n.phonenumbers.CountriesInfo.country_languages)
}
inline void CountriesInfo::add_country_languages(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_country_languages()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:i18n.phonenumbers.CountriesInfo.country_languages)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CountriesInfo::country_languages() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.CountriesInfo.country_languages)
  return _internal_country_languages();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CountriesInfo::mutable_country_languages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.CountriesInfo.country_languages)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_country_languages();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CountriesInfo::_internal_country_languages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_languages_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CountriesInfo::_internal_mutable_country_languages() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.country_languages_;
}

// -------------------------------------------------------------------

// CountryCodeInfo

// required int32 country_codes_num = 1;
inline bool CountryCodeInfo::has_country_codes_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CountryCodeInfo::clear_country_codes_num() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_codes_num_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t CountryCodeInfo::country_codes_num() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.CountryCodeInfo.country_codes_num)
  return _internal_country_codes_num();
}
inline void CountryCodeInfo::set_country_codes_num(::int32_t value) {
  _internal_set_country_codes_num(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.CountryCodeInfo.country_codes_num)
}
inline ::int32_t CountryCodeInfo::_internal_country_codes_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_codes_num_;
}
inline void CountryCodeInfo::_internal_set_country_codes_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.country_codes_num_ = value;
}

// repeated int32 country_codes = 2;
inline int CountryCodeInfo::_internal_country_codes_size() const {
  return _internal_country_codes().size();
}
inline int CountryCodeInfo::country_codes_size() const {
  return _internal_country_codes_size();
}
inline void CountryCodeInfo::clear_country_codes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_codes_.Clear();
}
inline ::int32_t CountryCodeInfo::country_codes(int index) const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.CountryCodeInfo.country_codes)
  return _internal_country_codes().Get(index);
}
inline void CountryCodeInfo::set_country_codes(int index, ::int32_t value) {
  _internal_mutable_country_codes()->Set(index, value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.CountryCodeInfo.country_codes)
}
inline void CountryCodeInfo::add_country_codes(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_country_codes()->Add(value);
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.CountryCodeInfo.country_codes)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CountryCodeInfo::country_codes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.CountryCodeInfo.country_codes)
  return _internal_country_codes();
}
inline ::google::protobuf::RepeatedField<::int32_t>* CountryCodeInfo::mutable_country_codes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.CountryCodeInfo.country_codes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_country_codes();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CountryCodeInfo::_internal_country_codes()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_codes_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* CountryCodeInfo::_internal_mutable_country_codes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.country_codes_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace phonenumbers
}  // namespace i18n


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_geocoding_5fdata_2eproto_2epb_2eh
