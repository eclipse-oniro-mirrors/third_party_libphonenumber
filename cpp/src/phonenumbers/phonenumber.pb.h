// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: phonenumber.proto
// Protobuf C++ Version: 5.29.4

#ifndef phonenumber_2eproto_2epb_2eh
#define phonenumber_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_phonenumber_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_phonenumber_2eproto {
  static const ::uint32_t offsets[];
};
namespace i18n {
namespace phonenumbers {
class PhoneNumber;
struct PhoneNumberDefaultTypeInternal;
extern PhoneNumberDefaultTypeInternal _PhoneNumber_default_instance_;
}  // namespace phonenumbers
}  // namespace i18n
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace i18n {
namespace phonenumbers {
enum PhoneNumber_CountryCodeSource : int {
  PhoneNumber_CountryCodeSource_UNSPECIFIED = 0,
  PhoneNumber_CountryCodeSource_FROM_NUMBER_WITH_PLUS_SIGN = 1,
  PhoneNumber_CountryCodeSource_FROM_NUMBER_WITH_IDD = 5,
  PhoneNumber_CountryCodeSource_FROM_NUMBER_WITHOUT_PLUS_SIGN = 10,
  PhoneNumber_CountryCodeSource_FROM_DEFAULT_COUNTRY = 20,
};

bool PhoneNumber_CountryCodeSource_IsValid(int value);
extern const uint32_t PhoneNumber_CountryCodeSource_internal_data_[];
constexpr PhoneNumber_CountryCodeSource PhoneNumber_CountryCodeSource_CountryCodeSource_MIN = static_cast<PhoneNumber_CountryCodeSource>(0);
constexpr PhoneNumber_CountryCodeSource PhoneNumber_CountryCodeSource_CountryCodeSource_MAX = static_cast<PhoneNumber_CountryCodeSource>(20);
constexpr int PhoneNumber_CountryCodeSource_CountryCodeSource_ARRAYSIZE = 20 + 1;
const std::string& PhoneNumber_CountryCodeSource_Name(PhoneNumber_CountryCodeSource value);
template <typename T>
const std::string& PhoneNumber_CountryCodeSource_Name(T value) {
  static_assert(std::is_same<T, PhoneNumber_CountryCodeSource>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CountryCodeSource_Name().");
  return PhoneNumber_CountryCodeSource_Name(static_cast<PhoneNumber_CountryCodeSource>(value));
}
bool PhoneNumber_CountryCodeSource_Parse(absl::string_view name, PhoneNumber_CountryCodeSource* value);

// ===================================================================


// -------------------------------------------------------------------

class PhoneNumber final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:i18n.phonenumbers.PhoneNumber) */ {
 public:
  inline PhoneNumber() : PhoneNumber(nullptr) {}
  ~PhoneNumber() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PhoneNumber* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PhoneNumber));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PhoneNumber(
      ::google::protobuf::internal::ConstantInitialized);

  inline PhoneNumber(const PhoneNumber& from) : PhoneNumber(nullptr, from) {}
  inline PhoneNumber(PhoneNumber&& from) noexcept
      : PhoneNumber(nullptr, std::move(from)) {}
  inline PhoneNumber& operator=(const PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneNumber& operator=(PhoneNumber&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PhoneNumber& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhoneNumber* internal_default_instance() {
    return reinterpret_cast<const PhoneNumber*>(
        &_PhoneNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PhoneNumber& a, PhoneNumber& b) { a.Swap(&b); }
  inline void Swap(PhoneNumber* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhoneNumber* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PhoneNumber* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<PhoneNumber>(arena);
  }
  void CopyFrom(const PhoneNumber& from);
  void MergeFrom(const PhoneNumber& from) { PhoneNumber::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PhoneNumber* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "i18n.phonenumbers.PhoneNumber"; }

 protected:
  explicit PhoneNumber(::google::protobuf::Arena* arena);
  PhoneNumber(::google::protobuf::Arena* arena, const PhoneNumber& from);
  PhoneNumber(::google::protobuf::Arena* arena, PhoneNumber&& from) noexcept
      : PhoneNumber(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataLite<30> _class_data_;

 public:
  // nested types ----------------------------------------------------
  using CountryCodeSource = PhoneNumber_CountryCodeSource;
  static constexpr CountryCodeSource UNSPECIFIED = PhoneNumber_CountryCodeSource_UNSPECIFIED;
  static constexpr CountryCodeSource FROM_NUMBER_WITH_PLUS_SIGN = PhoneNumber_CountryCodeSource_FROM_NUMBER_WITH_PLUS_SIGN;
  static constexpr CountryCodeSource FROM_NUMBER_WITH_IDD = PhoneNumber_CountryCodeSource_FROM_NUMBER_WITH_IDD;
  static constexpr CountryCodeSource FROM_NUMBER_WITHOUT_PLUS_SIGN = PhoneNumber_CountryCodeSource_FROM_NUMBER_WITHOUT_PLUS_SIGN;
  static constexpr CountryCodeSource FROM_DEFAULT_COUNTRY = PhoneNumber_CountryCodeSource_FROM_DEFAULT_COUNTRY;
  static inline bool CountryCodeSource_IsValid(int value) {
    return PhoneNumber_CountryCodeSource_IsValid(value);
  }
  static constexpr CountryCodeSource CountryCodeSource_MIN = PhoneNumber_CountryCodeSource_CountryCodeSource_MIN;
  static constexpr CountryCodeSource CountryCodeSource_MAX = PhoneNumber_CountryCodeSource_CountryCodeSource_MAX;
  static constexpr int CountryCodeSource_ARRAYSIZE = PhoneNumber_CountryCodeSource_CountryCodeSource_ARRAYSIZE;
  template <typename T>
  static inline const std::string& CountryCodeSource_Name(T value) {
    return PhoneNumber_CountryCodeSource_Name(value);
  }
  static inline bool CountryCodeSource_Parse(absl::string_view name, CountryCodeSource* value) {
    return PhoneNumber_CountryCodeSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kExtensionFieldNumber = 3,
    kRawInputFieldNumber = 5,
    kPreferredDomesticCarrierCodeFieldNumber = 7,
    kNationalNumberFieldNumber = 2,
    kCountryCodeFieldNumber = 1,
    kItalianLeadingZeroFieldNumber = 4,
    kCountryCodeSourceFieldNumber = 6,
    kNumberOfLeadingZerosFieldNumber = 8,
  };
  // optional string extension = 3;
  bool has_extension() const;
  void clear_extension() ;
  const std::string& extension() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_extension(Arg_&& arg, Args_... args);
  std::string* mutable_extension();
  PROTOBUF_NODISCARD std::string* release_extension();
  void set_allocated_extension(std::string* value);

  private:
  const std::string& _internal_extension() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extension(
      const std::string& value);
  std::string* _internal_mutable_extension();

  public:
  // optional string raw_input = 5;
  bool has_raw_input() const;
  void clear_raw_input() ;
  const std::string& raw_input() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_raw_input(Arg_&& arg, Args_... args);
  std::string* mutable_raw_input();
  PROTOBUF_NODISCARD std::string* release_raw_input();
  void set_allocated_raw_input(std::string* value);

  private:
  const std::string& _internal_raw_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_input(
      const std::string& value);
  std::string* _internal_mutable_raw_input();

  public:
  // optional string preferred_domestic_carrier_code = 7;
  bool has_preferred_domestic_carrier_code() const;
  void clear_preferred_domestic_carrier_code() ;
  const std::string& preferred_domestic_carrier_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_preferred_domestic_carrier_code(Arg_&& arg, Args_... args);
  std::string* mutable_preferred_domestic_carrier_code();
  PROTOBUF_NODISCARD std::string* release_preferred_domestic_carrier_code();
  void set_allocated_preferred_domestic_carrier_code(std::string* value);

  private:
  const std::string& _internal_preferred_domestic_carrier_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preferred_domestic_carrier_code(
      const std::string& value);
  std::string* _internal_mutable_preferred_domestic_carrier_code();

  public:
  // required uint64 national_number = 2;
  bool has_national_number() const;
  void clear_national_number() ;
  ::uint64_t national_number() const;
  void set_national_number(::uint64_t value);

  private:
  ::uint64_t _internal_national_number() const;
  void _internal_set_national_number(::uint64_t value);

  public:
  // required int32 country_code = 1;
  bool has_country_code() const;
  void clear_country_code() ;
  ::int32_t country_code() const;
  void set_country_code(::int32_t value);

  private:
  ::int32_t _internal_country_code() const;
  void _internal_set_country_code(::int32_t value);

  public:
  // optional bool italian_leading_zero = 4;
  bool has_italian_leading_zero() const;
  void clear_italian_leading_zero() ;
  bool italian_leading_zero() const;
  void set_italian_leading_zero(bool value);

  private:
  bool _internal_italian_leading_zero() const;
  void _internal_set_italian_leading_zero(bool value);

  public:
  // optional .i18n.phonenumbers.PhoneNumber.CountryCodeSource country_code_source = 6;
  bool has_country_code_source() const;
  void clear_country_code_source() ;
  ::i18n::phonenumbers::PhoneNumber_CountryCodeSource country_code_source() const;
  void set_country_code_source(::i18n::phonenumbers::PhoneNumber_CountryCodeSource value);

  private:
  ::i18n::phonenumbers::PhoneNumber_CountryCodeSource _internal_country_code_source() const;
  void _internal_set_country_code_source(::i18n::phonenumbers::PhoneNumber_CountryCodeSource value);

  public:
  // optional int32 number_of_leading_zeros = 8 [default = 1];
  bool has_number_of_leading_zeros() const;
  void clear_number_of_leading_zeros() ;
  ::int32_t number_of_leading_zeros() const;
  void set_number_of_leading_zeros(::int32_t value);

  private:
  ::int32_t _internal_number_of_leading_zeros() const;
  void _internal_set_number_of_leading_zeros(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:i18n.phonenumbers.PhoneNumber)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PhoneNumber& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr extension_;
    ::google::protobuf::internal::ArenaStringPtr raw_input_;
    ::google::protobuf::internal::ArenaStringPtr preferred_domestic_carrier_code_;
    ::uint64_t national_number_;
    ::int32_t country_code_;
    bool italian_leading_zero_;
    int country_code_source_;
    ::int32_t number_of_leading_zeros_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_phonenumber_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PhoneNumber

// required int32 country_code = 1;
inline bool PhoneNumber::has_country_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void PhoneNumber::clear_country_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.country_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t PhoneNumber::country_code() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.country_code)
  return _internal_country_code();
}
inline void PhoneNumber::set_country_code(::int32_t value) {
  _internal_set_country_code(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.country_code)
}
inline ::int32_t PhoneNumber::_internal_country_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.country_code_;
}
inline void PhoneNumber::_internal_set_country_code(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.country_code_ = value;
}

// required uint64 national_number = 2;
inline bool PhoneNumber::has_national_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PhoneNumber::clear_national_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.national_number_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t PhoneNumber::national_number() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.national_number)
  return _internal_national_number();
}
inline void PhoneNumber::set_national_number(::uint64_t value) {
  _internal_set_national_number(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.national_number)
}
inline ::uint64_t PhoneNumber::_internal_national_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.national_number_;
}
inline void PhoneNumber::_internal_set_national_number(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.national_number_ = value;
}

// optional string extension = 3;
inline bool PhoneNumber::has_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PhoneNumber::clear_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extension_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PhoneNumber::extension() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.extension)
  return _internal_extension();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PhoneNumber::set_extension(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.extension_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.extension)
}
inline std::string* PhoneNumber::mutable_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_extension();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumber.extension)
  return _s;
}
inline const std::string& PhoneNumber::_internal_extension() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extension_.Get();
}
inline void PhoneNumber::_internal_set_extension(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.extension_.Set(value, GetArena());
}
inline std::string* PhoneNumber::_internal_mutable_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.extension_.Mutable( GetArena());
}
inline std::string* PhoneNumber::release_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumber.extension)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.extension_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.extension_.Set("", GetArena());
  }
  return released;
}
inline void PhoneNumber::set_allocated_extension(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.extension_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.extension_.IsDefault()) {
    _impl_.extension_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumber.extension)
}

// optional bool italian_leading_zero = 4;
inline bool PhoneNumber::has_italian_leading_zero() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void PhoneNumber::clear_italian_leading_zero() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.italian_leading_zero_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool PhoneNumber::italian_leading_zero() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.italian_leading_zero)
  return _internal_italian_leading_zero();
}
inline void PhoneNumber::set_italian_leading_zero(bool value) {
  _internal_set_italian_leading_zero(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.italian_leading_zero)
}
inline bool PhoneNumber::_internal_italian_leading_zero() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.italian_leading_zero_;
}
inline void PhoneNumber::_internal_set_italian_leading_zero(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.italian_leading_zero_ = value;
}

// optional int32 number_of_leading_zeros = 8 [default = 1];
inline bool PhoneNumber::has_number_of_leading_zeros() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void PhoneNumber::clear_number_of_leading_zeros() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_leading_zeros_ = 1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t PhoneNumber::number_of_leading_zeros() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.number_of_leading_zeros)
  return _internal_number_of_leading_zeros();
}
inline void PhoneNumber::set_number_of_leading_zeros(::int32_t value) {
  _internal_set_number_of_leading_zeros(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.number_of_leading_zeros)
}
inline ::int32_t PhoneNumber::_internal_number_of_leading_zeros() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_of_leading_zeros_;
}
inline void PhoneNumber::_internal_set_number_of_leading_zeros(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_leading_zeros_ = value;
}

// optional string raw_input = 5;
inline bool PhoneNumber::has_raw_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PhoneNumber::clear_raw_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.raw_input_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PhoneNumber::raw_input() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.raw_input)
  return _internal_raw_input();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PhoneNumber::set_raw_input(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.raw_input_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.raw_input)
}
inline std::string* PhoneNumber::mutable_raw_input() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_raw_input();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumber.raw_input)
  return _s;
}
inline const std::string& PhoneNumber::_internal_raw_input() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.raw_input_.Get();
}
inline void PhoneNumber::_internal_set_raw_input(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.raw_input_.Set(value, GetArena());
}
inline std::string* PhoneNumber::_internal_mutable_raw_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.raw_input_.Mutable( GetArena());
}
inline std::string* PhoneNumber::release_raw_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumber.raw_input)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.raw_input_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.raw_input_.Set("", GetArena());
  }
  return released;
}
inline void PhoneNumber::set_allocated_raw_input(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.raw_input_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.raw_input_.IsDefault()) {
    _impl_.raw_input_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumber.raw_input)
}

// optional .i18n.phonenumbers.PhoneNumber.CountryCodeSource country_code_source = 6;
inline bool PhoneNumber::has_country_code_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void PhoneNumber::clear_country_code_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.country_code_source_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::i18n::phonenumbers::PhoneNumber_CountryCodeSource PhoneNumber::country_code_source() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.country_code_source)
  return _internal_country_code_source();
}
inline void PhoneNumber::set_country_code_source(::i18n::phonenumbers::PhoneNumber_CountryCodeSource value) {
  _internal_set_country_code_source(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.country_code_source)
}
inline ::i18n::phonenumbers::PhoneNumber_CountryCodeSource PhoneNumber::_internal_country_code_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::i18n::phonenumbers::PhoneNumber_CountryCodeSource>(_impl_.country_code_source_);
}
inline void PhoneNumber::_internal_set_country_code_source(::i18n::phonenumbers::PhoneNumber_CountryCodeSource value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::i18n::phonenumbers::PhoneNumber_CountryCodeSource_IsValid(value));
  _impl_.country_code_source_ = value;
}

// optional string preferred_domestic_carrier_code = 7;
inline bool PhoneNumber::has_preferred_domestic_carrier_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PhoneNumber::clear_preferred_domestic_carrier_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preferred_domestic_carrier_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PhoneNumber::preferred_domestic_carrier_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
  return _internal_preferred_domestic_carrier_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PhoneNumber::set_preferred_domestic_carrier_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.preferred_domestic_carrier_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
}
inline std::string* PhoneNumber::mutable_preferred_domestic_carrier_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_preferred_domestic_carrier_code();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
  return _s;
}
inline const std::string& PhoneNumber::_internal_preferred_domestic_carrier_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preferred_domestic_carrier_code_.Get();
}
inline void PhoneNumber::_internal_set_preferred_domestic_carrier_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.preferred_domestic_carrier_code_.Set(value, GetArena());
}
inline std::string* PhoneNumber::_internal_mutable_preferred_domestic_carrier_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.preferred_domestic_carrier_code_.Mutable( GetArena());
}
inline std::string* PhoneNumber::release_preferred_domestic_carrier_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.preferred_domestic_carrier_code_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.preferred_domestic_carrier_code_.Set("", GetArena());
  }
  return released;
}
inline void PhoneNumber::set_allocated_preferred_domestic_carrier_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.preferred_domestic_carrier_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.preferred_domestic_carrier_code_.IsDefault()) {
    _impl_.preferred_domestic_carrier_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace phonenumbers
}  // namespace i18n


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::i18n::phonenumbers::PhoneNumber_CountryCodeSource> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // phonenumber_2eproto_2epb_2eh
