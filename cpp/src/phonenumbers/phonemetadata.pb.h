// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phonemetadata.proto
// Protobuf C++ Version: 4.25.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_phonemetadata_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_phonemetadata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_phonemetadata_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_phonemetadata_2eproto {
  static const ::uint32_t offsets[];
};
namespace i18n {
namespace phonenumbers {
class NumberFormat;
struct NumberFormatDefaultTypeInternal;
extern NumberFormatDefaultTypeInternal _NumberFormat_default_instance_;
class PhoneMetadata;
struct PhoneMetadataDefaultTypeInternal;
extern PhoneMetadataDefaultTypeInternal _PhoneMetadata_default_instance_;
class PhoneMetadataCollection;
struct PhoneMetadataCollectionDefaultTypeInternal;
extern PhoneMetadataCollectionDefaultTypeInternal _PhoneMetadataCollection_default_instance_;
class PhoneNumberDesc;
struct PhoneNumberDescDefaultTypeInternal;
extern PhoneNumberDescDefaultTypeInternal _PhoneNumberDesc_default_instance_;
}  // namespace phonenumbers
}  // namespace i18n
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace i18n {
namespace phonenumbers {

// ===================================================================


// -------------------------------------------------------------------

class PhoneNumberDesc final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:i18n.phonenumbers.PhoneNumberDesc) */ {
 public:
  inline PhoneNumberDesc() : PhoneNumberDesc(nullptr) {}
  ~PhoneNumberDesc() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PhoneNumberDesc(::google::protobuf::internal::ConstantInitialized);

  inline PhoneNumberDesc(const PhoneNumberDesc& from)
      : PhoneNumberDesc(nullptr, from) {}
  PhoneNumberDesc(PhoneNumberDesc&& from) noexcept
    : PhoneNumberDesc() {
    *this = ::std::move(from);
  }

  inline PhoneNumberDesc& operator=(const PhoneNumberDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneNumberDesc& operator=(PhoneNumberDesc&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PhoneNumberDesc& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhoneNumberDesc* internal_default_instance() {
    return reinterpret_cast<const PhoneNumberDesc*>(
               &_PhoneNumberDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PhoneNumberDesc& a, PhoneNumberDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(PhoneNumberDesc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhoneNumberDesc* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PhoneNumberDesc* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PhoneNumberDesc>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const PhoneNumberDesc& from);
  void MergeFrom(const PhoneNumberDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PhoneNumberDesc* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "i18n.phonenumbers.PhoneNumberDesc";
  }
  protected:
  explicit PhoneNumberDesc(::google::protobuf::Arena* arena);
  PhoneNumberDesc(::google::protobuf::Arena* arena, const PhoneNumberDesc& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPossibleLengthFieldNumber = 9,
    kPossibleLengthLocalOnlyFieldNumber = 10,
    kNationalNumberPatternFieldNumber = 2,
    kExampleNumberFieldNumber = 6,
  };
  // repeated int32 possible_length = 9;
  int possible_length_size() const;
  private:
  int _internal_possible_length_size() const;

  public:
  void clear_possible_length() ;
  ::int32_t possible_length(int index) const;
  void set_possible_length(int index, ::int32_t value);
  void add_possible_length(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& possible_length() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_possible_length();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_possible_length() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_possible_length();

  public:
  // repeated int32 possible_length_local_only = 10;
  int possible_length_local_only_size() const;
  private:
  int _internal_possible_length_local_only_size() const;

  public:
  void clear_possible_length_local_only() ;
  ::int32_t possible_length_local_only(int index) const;
  void set_possible_length_local_only(int index, ::int32_t value);
  void add_possible_length_local_only(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& possible_length_local_only() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_possible_length_local_only();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_possible_length_local_only() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_possible_length_local_only();

  public:
  // optional string national_number_pattern = 2;
  bool has_national_number_pattern() const;
  void clear_national_number_pattern() ;
  const std::string& national_number_pattern() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_national_number_pattern(Arg_&& arg, Args_... args);
  std::string* mutable_national_number_pattern();
  PROTOBUF_NODISCARD std::string* release_national_number_pattern();
  void set_allocated_national_number_pattern(std::string* value);

  private:
  const std::string& _internal_national_number_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_national_number_pattern(
      const std::string& value);
  std::string* _internal_mutable_national_number_pattern();

  public:
  // optional string example_number = 6;
  bool has_example_number() const;
  void clear_example_number() ;
  const std::string& example_number() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_example_number(Arg_&& arg, Args_... args);
  std::string* mutable_example_number();
  PROTOBUF_NODISCARD std::string* release_example_number();
  void set_allocated_example_number(std::string* value);

  private:
  const std::string& _internal_example_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_example_number(
      const std::string& value);
  std::string* _internal_mutable_example_number();

  public:
  // @@protoc_insertion_point(class_scope:i18n.phonenumbers.PhoneNumberDesc)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> possible_length_;
    ::google::protobuf::RepeatedField<::int32_t> possible_length_local_only_;
    ::google::protobuf::internal::ArenaStringPtr national_number_pattern_;
    ::google::protobuf::internal::ArenaStringPtr example_number_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_phonemetadata_2eproto;
};// -------------------------------------------------------------------

class NumberFormat final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:i18n.phonenumbers.NumberFormat) */ {
 public:
  inline NumberFormat() : NumberFormat(nullptr) {}
  ~NumberFormat() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NumberFormat(::google::protobuf::internal::ConstantInitialized);

  inline NumberFormat(const NumberFormat& from)
      : NumberFormat(nullptr, from) {}
  NumberFormat(NumberFormat&& from) noexcept
    : NumberFormat() {
    *this = ::std::move(from);
  }

  inline NumberFormat& operator=(const NumberFormat& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumberFormat& operator=(NumberFormat&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NumberFormat& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumberFormat* internal_default_instance() {
    return reinterpret_cast<const NumberFormat*>(
               &_NumberFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NumberFormat& a, NumberFormat& b) {
    a.Swap(&b);
  }
  inline void Swap(NumberFormat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumberFormat* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NumberFormat* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NumberFormat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const NumberFormat& from);
  void MergeFrom(const NumberFormat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NumberFormat* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "i18n.phonenumbers.NumberFormat";
  }
  protected:
  explicit NumberFormat(::google::protobuf::Arena* arena);
  NumberFormat(::google::protobuf::Arena* arena, const NumberFormat& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeadingDigitsPatternFieldNumber = 3,
    kPatternFieldNumber = 1,
    kFormatFieldNumber = 2,
    kNationalPrefixFormattingRuleFieldNumber = 4,
    kDomesticCarrierCodeFormattingRuleFieldNumber = 5,
    kNationalPrefixOptionalWhenFormattingFieldNumber = 6,
  };
  // repeated string leading_digits_pattern = 3;
  int leading_digits_pattern_size() const;
  private:
  int _internal_leading_digits_pattern_size() const;

  public:
  void clear_leading_digits_pattern() ;
  const std::string& leading_digits_pattern(int index) const;
  std::string* mutable_leading_digits_pattern(int index);
  void set_leading_digits_pattern(int index, const std::string& value);
  void set_leading_digits_pattern(int index, std::string&& value);
  void set_leading_digits_pattern(int index, const char* value);
  void set_leading_digits_pattern(int index, const char* value, std::size_t size);
  void set_leading_digits_pattern(int index, absl::string_view value);
  std::string* add_leading_digits_pattern();
  void add_leading_digits_pattern(const std::string& value);
  void add_leading_digits_pattern(std::string&& value);
  void add_leading_digits_pattern(const char* value);
  void add_leading_digits_pattern(const char* value, std::size_t size);
  void add_leading_digits_pattern(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& leading_digits_pattern() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_leading_digits_pattern();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_leading_digits_pattern() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_leading_digits_pattern();

  public:
  // required string pattern = 1;
  bool has_pattern() const;
  void clear_pattern() ;
  const std::string& pattern() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pattern(Arg_&& arg, Args_... args);
  std::string* mutable_pattern();
  PROTOBUF_NODISCARD std::string* release_pattern();
  void set_allocated_pattern(std::string* value);

  private:
  const std::string& _internal_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pattern(
      const std::string& value);
  std::string* _internal_mutable_pattern();

  public:
  // required string format = 2;
  bool has_format() const;
  void clear_format() ;
  const std::string& format() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_format(Arg_&& arg, Args_... args);
  std::string* mutable_format();
  PROTOBUF_NODISCARD std::string* release_format();
  void set_allocated_format(std::string* value);

  private:
  const std::string& _internal_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_format(
      const std::string& value);
  std::string* _internal_mutable_format();

  public:
  // optional string national_prefix_formatting_rule = 4;
  bool has_national_prefix_formatting_rule() const;
  void clear_national_prefix_formatting_rule() ;
  const std::string& national_prefix_formatting_rule() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_national_prefix_formatting_rule(Arg_&& arg, Args_... args);
  std::string* mutable_national_prefix_formatting_rule();
  PROTOBUF_NODISCARD std::string* release_national_prefix_formatting_rule();
  void set_allocated_national_prefix_formatting_rule(std::string* value);

  private:
  const std::string& _internal_national_prefix_formatting_rule() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_national_prefix_formatting_rule(
      const std::string& value);
  std::string* _internal_mutable_national_prefix_formatting_rule();

  public:
  // optional string domestic_carrier_code_formatting_rule = 5;
  bool has_domestic_carrier_code_formatting_rule() const;
  void clear_domestic_carrier_code_formatting_rule() ;
  const std::string& domestic_carrier_code_formatting_rule() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_domestic_carrier_code_formatting_rule(Arg_&& arg, Args_... args);
  std::string* mutable_domestic_carrier_code_formatting_rule();
  PROTOBUF_NODISCARD std::string* release_domestic_carrier_code_formatting_rule();
  void set_allocated_domestic_carrier_code_formatting_rule(std::string* value);

  private:
  const std::string& _internal_domestic_carrier_code_formatting_rule() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domestic_carrier_code_formatting_rule(
      const std::string& value);
  std::string* _internal_mutable_domestic_carrier_code_formatting_rule();

  public:
  // optional bool national_prefix_optional_when_formatting = 6 [default = false];
  bool has_national_prefix_optional_when_formatting() const;
  void clear_national_prefix_optional_when_formatting() ;
  bool national_prefix_optional_when_formatting() const;
  void set_national_prefix_optional_when_formatting(bool value);

  private:
  bool _internal_national_prefix_optional_when_formatting() const;
  void _internal_set_national_prefix_optional_when_formatting(bool value);

  public:
  // @@protoc_insertion_point(class_scope:i18n.phonenumbers.NumberFormat)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> leading_digits_pattern_;
    ::google::protobuf::internal::ArenaStringPtr pattern_;
    ::google::protobuf::internal::ArenaStringPtr format_;
    ::google::protobuf::internal::ArenaStringPtr national_prefix_formatting_rule_;
    ::google::protobuf::internal::ArenaStringPtr domestic_carrier_code_formatting_rule_;
    bool national_prefix_optional_when_formatting_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_phonemetadata_2eproto;
};// -------------------------------------------------------------------

class PhoneMetadata final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:i18n.phonenumbers.PhoneMetadata) */ {
 public:
  inline PhoneMetadata() : PhoneMetadata(nullptr) {}
  ~PhoneMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PhoneMetadata(::google::protobuf::internal::ConstantInitialized);

  inline PhoneMetadata(const PhoneMetadata& from)
      : PhoneMetadata(nullptr, from) {}
  PhoneMetadata(PhoneMetadata&& from) noexcept
    : PhoneMetadata() {
    *this = ::std::move(from);
  }

  inline PhoneMetadata& operator=(const PhoneMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneMetadata& operator=(PhoneMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PhoneMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhoneMetadata* internal_default_instance() {
    return reinterpret_cast<const PhoneMetadata*>(
               &_PhoneMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PhoneMetadata& a, PhoneMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(PhoneMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhoneMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PhoneMetadata* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PhoneMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const PhoneMetadata& from);
  void MergeFrom(const PhoneMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PhoneMetadata* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "i18n.phonenumbers.PhoneMetadata";
  }
  protected:
  explicit PhoneMetadata(::google::protobuf::Arena* arena);
  PhoneMetadata(::google::protobuf::Arena* arena, const PhoneMetadata& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFormatFieldNumber = 19,
    kIntlNumberFormatFieldNumber = 20,
    kIdFieldNumber = 9,
    kInternationalPrefixFieldNumber = 11,
    kNationalPrefixFieldNumber = 12,
    kPreferredExtnPrefixFieldNumber = 13,
    kNationalPrefixForParsingFieldNumber = 15,
    kNationalPrefixTransformRuleFieldNumber = 16,
    kPreferredInternationalPrefixFieldNumber = 17,
    kLeadingDigitsFieldNumber = 23,
    kGeneralDescFieldNumber = 1,
    kFixedLineFieldNumber = 2,
    kMobileFieldNumber = 3,
    kTollFreeFieldNumber = 4,
    kPremiumRateFieldNumber = 5,
    kSharedCostFieldNumber = 6,
    kPersonalNumberFieldNumber = 7,
    kVoipFieldNumber = 8,
    kPagerFieldNumber = 21,
    kNoInternationalDiallingFieldNumber = 24,
    kUanFieldNumber = 25,
    kEmergencyFieldNumber = 27,
    kVoicemailFieldNumber = 28,
    kShortCodeFieldNumber = 29,
    kStandardRateFieldNumber = 30,
    kCarrierSpecificFieldNumber = 31,
    kSmsServicesFieldNumber = 33,
    kCountryCodeFieldNumber = 10,
    kSameMobileAndFixedLinePatternFieldNumber = 18,
    kMainCountryForCodeFieldNumber = 22,
    kMobileNumberPortableRegionFieldNumber = 32,
  };
  // repeated .i18n.phonenumbers.NumberFormat number_format = 19;
  int number_format_size() const;
  private:
  int _internal_number_format_size() const;

  public:
  void clear_number_format() ;
  ::i18n::phonenumbers::NumberFormat* mutable_number_format(int index);
  ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat >*
      mutable_number_format();
  private:
  const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::NumberFormat>& _internal_number_format() const;
  ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::NumberFormat>* _internal_mutable_number_format();
  public:
  const ::i18n::phonenumbers::NumberFormat& number_format(int index) const;
  ::i18n::phonenumbers::NumberFormat* add_number_format();
  const ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat >&
      number_format() const;
  // repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
  int intl_number_format_size() const;
  private:
  int _internal_intl_number_format_size() const;

  public:
  void clear_intl_number_format() ;
  ::i18n::phonenumbers::NumberFormat* mutable_intl_number_format(int index);
  ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat >*
      mutable_intl_number_format();
  private:
  const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::NumberFormat>& _internal_intl_number_format() const;
  ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::NumberFormat>* _internal_mutable_intl_number_format();
  public:
  const ::i18n::phonenumbers::NumberFormat& intl_number_format(int index) const;
  ::i18n::phonenumbers::NumberFormat* add_intl_number_format();
  const ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat >&
      intl_number_format() const;
  // required string id = 9;
  bool has_id() const;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // optional string international_prefix = 11;
  bool has_international_prefix() const;
  void clear_international_prefix() ;
  const std::string& international_prefix() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_international_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_international_prefix();
  PROTOBUF_NODISCARD std::string* release_international_prefix();
  void set_allocated_international_prefix(std::string* value);

  private:
  const std::string& _internal_international_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_international_prefix(
      const std::string& value);
  std::string* _internal_mutable_international_prefix();

  public:
  // optional string national_prefix = 12;
  bool has_national_prefix() const;
  void clear_national_prefix() ;
  const std::string& national_prefix() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_national_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_national_prefix();
  PROTOBUF_NODISCARD std::string* release_national_prefix();
  void set_allocated_national_prefix(std::string* value);

  private:
  const std::string& _internal_national_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_national_prefix(
      const std::string& value);
  std::string* _internal_mutable_national_prefix();

  public:
  // optional string preferred_extn_prefix = 13;
  bool has_preferred_extn_prefix() const;
  void clear_preferred_extn_prefix() ;
  const std::string& preferred_extn_prefix() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_preferred_extn_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_preferred_extn_prefix();
  PROTOBUF_NODISCARD std::string* release_preferred_extn_prefix();
  void set_allocated_preferred_extn_prefix(std::string* value);

  private:
  const std::string& _internal_preferred_extn_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preferred_extn_prefix(
      const std::string& value);
  std::string* _internal_mutable_preferred_extn_prefix();

  public:
  // optional string national_prefix_for_parsing = 15;
  bool has_national_prefix_for_parsing() const;
  void clear_national_prefix_for_parsing() ;
  const std::string& national_prefix_for_parsing() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_national_prefix_for_parsing(Arg_&& arg, Args_... args);
  std::string* mutable_national_prefix_for_parsing();
  PROTOBUF_NODISCARD std::string* release_national_prefix_for_parsing();
  void set_allocated_national_prefix_for_parsing(std::string* value);

  private:
  const std::string& _internal_national_prefix_for_parsing() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_national_prefix_for_parsing(
      const std::string& value);
  std::string* _internal_mutable_national_prefix_for_parsing();

  public:
  // optional string national_prefix_transform_rule = 16;
  bool has_national_prefix_transform_rule() const;
  void clear_national_prefix_transform_rule() ;
  const std::string& national_prefix_transform_rule() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_national_prefix_transform_rule(Arg_&& arg, Args_... args);
  std::string* mutable_national_prefix_transform_rule();
  PROTOBUF_NODISCARD std::string* release_national_prefix_transform_rule();
  void set_allocated_national_prefix_transform_rule(std::string* value);

  private:
  const std::string& _internal_national_prefix_transform_rule() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_national_prefix_transform_rule(
      const std::string& value);
  std::string* _internal_mutable_national_prefix_transform_rule();

  public:
  // optional string preferred_international_prefix = 17;
  bool has_preferred_international_prefix() const;
  void clear_preferred_international_prefix() ;
  const std::string& preferred_international_prefix() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_preferred_international_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_preferred_international_prefix();
  PROTOBUF_NODISCARD std::string* release_preferred_international_prefix();
  void set_allocated_preferred_international_prefix(std::string* value);

  private:
  const std::string& _internal_preferred_international_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preferred_international_prefix(
      const std::string& value);
  std::string* _internal_mutable_preferred_international_prefix();

  public:
  // optional string leading_digits = 23;
  bool has_leading_digits() const;
  void clear_leading_digits() ;
  const std::string& leading_digits() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_leading_digits(Arg_&& arg, Args_... args);
  std::string* mutable_leading_digits();
  PROTOBUF_NODISCARD std::string* release_leading_digits();
  void set_allocated_leading_digits(std::string* value);

  private:
  const std::string& _internal_leading_digits() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leading_digits(
      const std::string& value);
  std::string* _internal_mutable_leading_digits();

  public:
  // optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
  bool has_general_desc() const;
  void clear_general_desc() ;
  const ::i18n::phonenumbers::PhoneNumberDesc& general_desc() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::PhoneNumberDesc* release_general_desc();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_general_desc();
  void set_allocated_general_desc(::i18n::phonenumbers::PhoneNumberDesc* value);
  void unsafe_arena_set_allocated_general_desc(::i18n::phonenumbers::PhoneNumberDesc* value);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_general_desc();

  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_general_desc() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_general_desc();

  public:
  // optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
  bool has_fixed_line() const;
  void clear_fixed_line() ;
  const ::i18n::phonenumbers::PhoneNumberDesc& fixed_line() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::PhoneNumberDesc* release_fixed_line();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_fixed_line();
  void set_allocated_fixed_line(::i18n::phonenumbers::PhoneNumberDesc* value);
  void unsafe_arena_set_allocated_fixed_line(::i18n::phonenumbers::PhoneNumberDesc* value);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_fixed_line();

  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_fixed_line() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_fixed_line();

  public:
  // optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
  bool has_mobile() const;
  void clear_mobile() ;
  const ::i18n::phonenumbers::PhoneNumberDesc& mobile() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::PhoneNumberDesc* release_mobile();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_mobile();
  void set_allocated_mobile(::i18n::phonenumbers::PhoneNumberDesc* value);
  void unsafe_arena_set_allocated_mobile(::i18n::phonenumbers::PhoneNumberDesc* value);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_mobile();

  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_mobile() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_mobile();

  public:
  // optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
  bool has_toll_free() const;
  void clear_toll_free() ;
  const ::i18n::phonenumbers::PhoneNumberDesc& toll_free() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::PhoneNumberDesc* release_toll_free();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_toll_free();
  void set_allocated_toll_free(::i18n::phonenumbers::PhoneNumberDesc* value);
  void unsafe_arena_set_allocated_toll_free(::i18n::phonenumbers::PhoneNumberDesc* value);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_toll_free();

  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_toll_free() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_toll_free();

  public:
  // optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
  bool has_premium_rate() const;
  void clear_premium_rate() ;
  const ::i18n::phonenumbers::PhoneNumberDesc& premium_rate() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::PhoneNumberDesc* release_premium_rate();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_premium_rate();
  void set_allocated_premium_rate(::i18n::phonenumbers::PhoneNumberDesc* value);
  void unsafe_arena_set_allocated_premium_rate(::i18n::phonenumbers::PhoneNumberDesc* value);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_premium_rate();

  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_premium_rate() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_premium_rate();

  public:
  // optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
  bool has_shared_cost() const;
  void clear_shared_cost() ;
  const ::i18n::phonenumbers::PhoneNumberDesc& shared_cost() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::PhoneNumberDesc* release_shared_cost();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_shared_cost();
  void set_allocated_shared_cost(::i18n::phonenumbers::PhoneNumberDesc* value);
  void unsafe_arena_set_allocated_shared_cost(::i18n::phonenumbers::PhoneNumberDesc* value);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_shared_cost();

  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_shared_cost() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_shared_cost();

  public:
  // optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
  bool has_personal_number() const;
  void clear_personal_number() ;
  const ::i18n::phonenumbers::PhoneNumberDesc& personal_number() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::PhoneNumberDesc* release_personal_number();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_personal_number();
  void set_allocated_personal_number(::i18n::phonenumbers::PhoneNumberDesc* value);
  void unsafe_arena_set_allocated_personal_number(::i18n::phonenumbers::PhoneNumberDesc* value);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_personal_number();

  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_personal_number() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_personal_number();

  public:
  // optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
  bool has_voip() const;
  void clear_voip() ;
  const ::i18n::phonenumbers::PhoneNumberDesc& voip() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::PhoneNumberDesc* release_voip();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_voip();
  void set_allocated_voip(::i18n::phonenumbers::PhoneNumberDesc* value);
  void unsafe_arena_set_allocated_voip(::i18n::phonenumbers::PhoneNumberDesc* value);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_voip();

  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_voip() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_voip();

  public:
  // optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
  bool has_pager() const;
  void clear_pager() ;
  const ::i18n::phonenumbers::PhoneNumberDesc& pager() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::PhoneNumberDesc* release_pager();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_pager();
  void set_allocated_pager(::i18n::phonenumbers::PhoneNumberDesc* value);
  void unsafe_arena_set_allocated_pager(::i18n::phonenumbers::PhoneNumberDesc* value);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_pager();

  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_pager() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_pager();

  public:
  // optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
  bool has_no_international_dialling() const;
  void clear_no_international_dialling() ;
  const ::i18n::phonenumbers::PhoneNumberDesc& no_international_dialling() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::PhoneNumberDesc* release_no_international_dialling();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_no_international_dialling();
  void set_allocated_no_international_dialling(::i18n::phonenumbers::PhoneNumberDesc* value);
  void unsafe_arena_set_allocated_no_international_dialling(::i18n::phonenumbers::PhoneNumberDesc* value);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_no_international_dialling();

  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_no_international_dialling() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_no_international_dialling();

  public:
  // optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
  bool has_uan() const;
  void clear_uan() ;
  const ::i18n::phonenumbers::PhoneNumberDesc& uan() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::PhoneNumberDesc* release_uan();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_uan();
  void set_allocated_uan(::i18n::phonenumbers::PhoneNumberDesc* value);
  void unsafe_arena_set_allocated_uan(::i18n::phonenumbers::PhoneNumberDesc* value);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_uan();

  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_uan() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_uan();

  public:
  // optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
  bool has_emergency() const;
  void clear_emergency() ;
  const ::i18n::phonenumbers::PhoneNumberDesc& emergency() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::PhoneNumberDesc* release_emergency();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_emergency();
  void set_allocated_emergency(::i18n::phonenumbers::PhoneNumberDesc* value);
  void unsafe_arena_set_allocated_emergency(::i18n::phonenumbers::PhoneNumberDesc* value);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_emergency();

  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_emergency() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_emergency();

  public:
  // optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
  bool has_voicemail() const;
  void clear_voicemail() ;
  const ::i18n::phonenumbers::PhoneNumberDesc& voicemail() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::PhoneNumberDesc* release_voicemail();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_voicemail();
  void set_allocated_voicemail(::i18n::phonenumbers::PhoneNumberDesc* value);
  void unsafe_arena_set_allocated_voicemail(::i18n::phonenumbers::PhoneNumberDesc* value);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_voicemail();

  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_voicemail() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_voicemail();

  public:
  // optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
  bool has_short_code() const;
  void clear_short_code() ;
  const ::i18n::phonenumbers::PhoneNumberDesc& short_code() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::PhoneNumberDesc* release_short_code();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_short_code();
  void set_allocated_short_code(::i18n::phonenumbers::PhoneNumberDesc* value);
  void unsafe_arena_set_allocated_short_code(::i18n::phonenumbers::PhoneNumberDesc* value);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_short_code();

  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_short_code() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_short_code();

  public:
  // optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
  bool has_standard_rate() const;
  void clear_standard_rate() ;
  const ::i18n::phonenumbers::PhoneNumberDesc& standard_rate() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::PhoneNumberDesc* release_standard_rate();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_standard_rate();
  void set_allocated_standard_rate(::i18n::phonenumbers::PhoneNumberDesc* value);
  void unsafe_arena_set_allocated_standard_rate(::i18n::phonenumbers::PhoneNumberDesc* value);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_standard_rate();

  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_standard_rate() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_standard_rate();

  public:
  // optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
  bool has_carrier_specific() const;
  void clear_carrier_specific() ;
  const ::i18n::phonenumbers::PhoneNumberDesc& carrier_specific() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::PhoneNumberDesc* release_carrier_specific();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_carrier_specific();
  void set_allocated_carrier_specific(::i18n::phonenumbers::PhoneNumberDesc* value);
  void unsafe_arena_set_allocated_carrier_specific(::i18n::phonenumbers::PhoneNumberDesc* value);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_carrier_specific();

  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_carrier_specific() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_carrier_specific();

  public:
  // optional .i18n.phonenumbers.PhoneNumberDesc sms_services = 33;
  bool has_sms_services() const;
  void clear_sms_services() ;
  const ::i18n::phonenumbers::PhoneNumberDesc& sms_services() const;
  PROTOBUF_NODISCARD ::i18n::phonenumbers::PhoneNumberDesc* release_sms_services();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_sms_services();
  void set_allocated_sms_services(::i18n::phonenumbers::PhoneNumberDesc* value);
  void unsafe_arena_set_allocated_sms_services(::i18n::phonenumbers::PhoneNumberDesc* value);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_sms_services();

  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_sms_services() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_sms_services();

  public:
  // optional int32 country_code = 10;
  bool has_country_code() const;
  void clear_country_code() ;
  ::int32_t country_code() const;
  void set_country_code(::int32_t value);

  private:
  ::int32_t _internal_country_code() const;
  void _internal_set_country_code(::int32_t value);

  public:
  // optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
  bool has_same_mobile_and_fixed_line_pattern() const;
  void clear_same_mobile_and_fixed_line_pattern() ;
  bool same_mobile_and_fixed_line_pattern() const;
  void set_same_mobile_and_fixed_line_pattern(bool value);

  private:
  bool _internal_same_mobile_and_fixed_line_pattern() const;
  void _internal_set_same_mobile_and_fixed_line_pattern(bool value);

  public:
  // optional bool main_country_for_code = 22 [default = false];
  bool has_main_country_for_code() const;
  void clear_main_country_for_code() ;
  bool main_country_for_code() const;
  void set_main_country_for_code(bool value);

  private:
  bool _internal_main_country_for_code() const;
  void _internal_set_main_country_for_code(bool value);

  public:
  // optional bool mobile_number_portable_region = 32 [default = false];
  bool has_mobile_number_portable_region() const;
  void clear_mobile_number_portable_region() ;
  bool mobile_number_portable_region() const;
  void set_mobile_number_portable_region(bool value);

  private:
  bool _internal_mobile_number_portable_region() const;
  void _internal_set_mobile_number_portable_region(bool value);

  public:
  // @@protoc_insertion_point(class_scope:i18n.phonenumbers.PhoneMetadata)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 31, 19,
      0, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat > number_format_;
    ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat > intl_number_format_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr international_prefix_;
    ::google::protobuf::internal::ArenaStringPtr national_prefix_;
    ::google::protobuf::internal::ArenaStringPtr preferred_extn_prefix_;
    ::google::protobuf::internal::ArenaStringPtr national_prefix_for_parsing_;
    ::google::protobuf::internal::ArenaStringPtr national_prefix_transform_rule_;
    ::google::protobuf::internal::ArenaStringPtr preferred_international_prefix_;
    ::google::protobuf::internal::ArenaStringPtr leading_digits_;
    ::i18n::phonenumbers::PhoneNumberDesc* general_desc_;
    ::i18n::phonenumbers::PhoneNumberDesc* fixed_line_;
    ::i18n::phonenumbers::PhoneNumberDesc* mobile_;
    ::i18n::phonenumbers::PhoneNumberDesc* toll_free_;
    ::i18n::phonenumbers::PhoneNumberDesc* premium_rate_;
    ::i18n::phonenumbers::PhoneNumberDesc* shared_cost_;
    ::i18n::phonenumbers::PhoneNumberDesc* personal_number_;
    ::i18n::phonenumbers::PhoneNumberDesc* voip_;
    ::i18n::phonenumbers::PhoneNumberDesc* pager_;
    ::i18n::phonenumbers::PhoneNumberDesc* no_international_dialling_;
    ::i18n::phonenumbers::PhoneNumberDesc* uan_;
    ::i18n::phonenumbers::PhoneNumberDesc* emergency_;
    ::i18n::phonenumbers::PhoneNumberDesc* voicemail_;
    ::i18n::phonenumbers::PhoneNumberDesc* short_code_;
    ::i18n::phonenumbers::PhoneNumberDesc* standard_rate_;
    ::i18n::phonenumbers::PhoneNumberDesc* carrier_specific_;
    ::i18n::phonenumbers::PhoneNumberDesc* sms_services_;
    ::int32_t country_code_;
    bool same_mobile_and_fixed_line_pattern_;
    bool main_country_for_code_;
    bool mobile_number_portable_region_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_phonemetadata_2eproto;
};// -------------------------------------------------------------------

class PhoneMetadataCollection final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:i18n.phonenumbers.PhoneMetadataCollection) */ {
 public:
  inline PhoneMetadataCollection() : PhoneMetadataCollection(nullptr) {}
  ~PhoneMetadataCollection() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PhoneMetadataCollection(::google::protobuf::internal::ConstantInitialized);

  inline PhoneMetadataCollection(const PhoneMetadataCollection& from)
      : PhoneMetadataCollection(nullptr, from) {}
  PhoneMetadataCollection(PhoneMetadataCollection&& from) noexcept
    : PhoneMetadataCollection() {
    *this = ::std::move(from);
  }

  inline PhoneMetadataCollection& operator=(const PhoneMetadataCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneMetadataCollection& operator=(PhoneMetadataCollection&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PhoneMetadataCollection& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhoneMetadataCollection* internal_default_instance() {
    return reinterpret_cast<const PhoneMetadataCollection*>(
               &_PhoneMetadataCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PhoneMetadataCollection& a, PhoneMetadataCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(PhoneMetadataCollection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhoneMetadataCollection* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PhoneMetadataCollection* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PhoneMetadataCollection>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const PhoneMetadataCollection& from);
  void MergeFrom(const PhoneMetadataCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PhoneMetadataCollection* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "i18n.phonenumbers.PhoneMetadataCollection";
  }
  protected:
  explicit PhoneMetadataCollection(::google::protobuf::Arena* arena);
  PhoneMetadataCollection(::google::protobuf::Arena* arena, const PhoneMetadataCollection& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  ::i18n::phonenumbers::PhoneMetadata* mutable_metadata(int index);
  ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::PhoneMetadata >*
      mutable_metadata();
  private:
  const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::PhoneMetadata>& _internal_metadata() const;
  ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::PhoneMetadata>* _internal_mutable_metadata();
  public:
  const ::i18n::phonenumbers::PhoneMetadata& metadata(int index) const;
  ::i18n::phonenumbers::PhoneMetadata* add_metadata();
  const ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::PhoneMetadata >&
      metadata() const;
  // @@protoc_insertion_point(class_scope:i18n.phonenumbers.PhoneMetadataCollection)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::PhoneMetadata > metadata_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_phonemetadata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NumberFormat

// required string pattern = 1;
inline bool NumberFormat::has_pattern() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NumberFormat::clear_pattern() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pattern_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NumberFormat::pattern() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.pattern)
  return _internal_pattern();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NumberFormat::set_pattern(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pattern_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.pattern)
}
inline std::string* NumberFormat::mutable_pattern() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_pattern();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.pattern)
  return _s;
}
inline const std::string& NumberFormat::_internal_pattern() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pattern_.Get();
}
inline void NumberFormat::_internal_set_pattern(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pattern_.Set(value, GetArena());
}
inline std::string* NumberFormat::_internal_mutable_pattern() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.pattern_.Mutable( GetArena());
}
inline std::string* NumberFormat::release_pattern() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.NumberFormat.pattern)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.pattern_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pattern_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NumberFormat::set_allocated_pattern(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pattern_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pattern_.IsDefault()) {
          _impl_.pattern_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.NumberFormat.pattern)
}

// required string format = 2;
inline bool NumberFormat::has_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NumberFormat::clear_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.format_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NumberFormat::format() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.format)
  return _internal_format();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NumberFormat::set_format(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.format_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.format)
}
inline std::string* NumberFormat::mutable_format() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.format)
  return _s;
}
inline const std::string& NumberFormat::_internal_format() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.format_.Get();
}
inline void NumberFormat::_internal_set_format(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.format_.Set(value, GetArena());
}
inline std::string* NumberFormat::_internal_mutable_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.format_.Mutable( GetArena());
}
inline std::string* NumberFormat::release_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.NumberFormat.format)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.format_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.format_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NumberFormat::set_allocated_format(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.format_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.format_.IsDefault()) {
          _impl_.format_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.NumberFormat.format)
}

// repeated string leading_digits_pattern = 3;
inline int NumberFormat::_internal_leading_digits_pattern_size() const {
  return _internal_leading_digits_pattern().size();
}
inline int NumberFormat::leading_digits_pattern_size() const {
  return _internal_leading_digits_pattern_size();
}
inline void NumberFormat::clear_leading_digits_pattern() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leading_digits_pattern_.Clear();
}
inline std::string* NumberFormat::add_leading_digits_pattern()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_leading_digits_pattern()->Add();
  // @@protoc_insertion_point(field_add_mutable:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
  return _s;
}
inline const std::string& NumberFormat::leading_digits_pattern(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
  return _internal_leading_digits_pattern().Get(index);
}
inline std::string* NumberFormat::mutable_leading_digits_pattern(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
  return _internal_mutable_leading_digits_pattern()->Mutable(index);
}
inline void NumberFormat::set_leading_digits_pattern(int index, const std::string& value) {
  _internal_mutable_leading_digits_pattern()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline void NumberFormat::set_leading_digits_pattern(int index, std::string&& value) {
  _internal_mutable_leading_digits_pattern()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline void NumberFormat::set_leading_digits_pattern(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_leading_digits_pattern()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline void NumberFormat::set_leading_digits_pattern(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_leading_digits_pattern()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline void NumberFormat::set_leading_digits_pattern(int index, absl::string_view value) {
  _internal_mutable_leading_digits_pattern()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline void NumberFormat::add_leading_digits_pattern(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_leading_digits_pattern()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline void NumberFormat::add_leading_digits_pattern(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_leading_digits_pattern()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline void NumberFormat::add_leading_digits_pattern(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_leading_digits_pattern()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline void NumberFormat::add_leading_digits_pattern(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_leading_digits_pattern()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline void NumberFormat::add_leading_digits_pattern(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_leading_digits_pattern()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NumberFormat::leading_digits_pattern() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
  return _internal_leading_digits_pattern();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NumberFormat::mutable_leading_digits_pattern() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_leading_digits_pattern();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NumberFormat::_internal_leading_digits_pattern() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.leading_digits_pattern_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NumberFormat::_internal_mutable_leading_digits_pattern() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.leading_digits_pattern_;
}

// optional string national_prefix_formatting_rule = 4;
inline bool NumberFormat::has_national_prefix_formatting_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NumberFormat::clear_national_prefix_formatting_rule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.national_prefix_formatting_rule_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NumberFormat::national_prefix_formatting_rule() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
  return _internal_national_prefix_formatting_rule();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NumberFormat::set_national_prefix_formatting_rule(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.national_prefix_formatting_rule_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
}
inline std::string* NumberFormat::mutable_national_prefix_formatting_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_national_prefix_formatting_rule();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
  return _s;
}
inline const std::string& NumberFormat::_internal_national_prefix_formatting_rule() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.national_prefix_formatting_rule_.Get();
}
inline void NumberFormat::_internal_set_national_prefix_formatting_rule(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.national_prefix_formatting_rule_.Set(value, GetArena());
}
inline std::string* NumberFormat::_internal_mutable_national_prefix_formatting_rule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.national_prefix_formatting_rule_.Mutable( GetArena());
}
inline std::string* NumberFormat::release_national_prefix_formatting_rule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.national_prefix_formatting_rule_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.national_prefix_formatting_rule_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NumberFormat::set_allocated_national_prefix_formatting_rule(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.national_prefix_formatting_rule_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.national_prefix_formatting_rule_.IsDefault()) {
          _impl_.national_prefix_formatting_rule_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
}

// optional bool national_prefix_optional_when_formatting = 6 [default = false];
inline bool NumberFormat::has_national_prefix_optional_when_formatting() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void NumberFormat::clear_national_prefix_optional_when_formatting() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.national_prefix_optional_when_formatting_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool NumberFormat::national_prefix_optional_when_formatting() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.national_prefix_optional_when_formatting)
  return _internal_national_prefix_optional_when_formatting();
}
inline void NumberFormat::set_national_prefix_optional_when_formatting(bool value) {
  _internal_set_national_prefix_optional_when_formatting(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.national_prefix_optional_when_formatting)
}
inline bool NumberFormat::_internal_national_prefix_optional_when_formatting() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.national_prefix_optional_when_formatting_;
}
inline void NumberFormat::_internal_set_national_prefix_optional_when_formatting(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.national_prefix_optional_when_formatting_ = value;
}

// optional string domestic_carrier_code_formatting_rule = 5;
inline bool NumberFormat::has_domestic_carrier_code_formatting_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NumberFormat::clear_domestic_carrier_code_formatting_rule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.domestic_carrier_code_formatting_rule_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NumberFormat::domestic_carrier_code_formatting_rule() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
  return _internal_domestic_carrier_code_formatting_rule();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NumberFormat::set_domestic_carrier_code_formatting_rule(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.domestic_carrier_code_formatting_rule_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
}
inline std::string* NumberFormat::mutable_domestic_carrier_code_formatting_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_domestic_carrier_code_formatting_rule();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
  return _s;
}
inline const std::string& NumberFormat::_internal_domestic_carrier_code_formatting_rule() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.domestic_carrier_code_formatting_rule_.Get();
}
inline void NumberFormat::_internal_set_domestic_carrier_code_formatting_rule(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.domestic_carrier_code_formatting_rule_.Set(value, GetArena());
}
inline std::string* NumberFormat::_internal_mutable_domestic_carrier_code_formatting_rule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.domestic_carrier_code_formatting_rule_.Mutable( GetArena());
}
inline std::string* NumberFormat::release_domestic_carrier_code_formatting_rule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.domestic_carrier_code_formatting_rule_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.domestic_carrier_code_formatting_rule_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NumberFormat::set_allocated_domestic_carrier_code_formatting_rule(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.domestic_carrier_code_formatting_rule_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.domestic_carrier_code_formatting_rule_.IsDefault()) {
          _impl_.domestic_carrier_code_formatting_rule_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
}

// -------------------------------------------------------------------

// PhoneNumberDesc

// optional string national_number_pattern = 2;
inline bool PhoneNumberDesc::has_national_number_pattern() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PhoneNumberDesc::clear_national_number_pattern() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.national_number_pattern_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PhoneNumberDesc::national_number_pattern() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
  return _internal_national_number_pattern();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PhoneNumberDesc::set_national_number_pattern(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.national_number_pattern_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
}
inline std::string* PhoneNumberDesc::mutable_national_number_pattern() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_national_number_pattern();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
  return _s;
}
inline const std::string& PhoneNumberDesc::_internal_national_number_pattern() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.national_number_pattern_.Get();
}
inline void PhoneNumberDesc::_internal_set_national_number_pattern(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.national_number_pattern_.Set(value, GetArena());
}
inline std::string* PhoneNumberDesc::_internal_mutable_national_number_pattern() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.national_number_pattern_.Mutable( GetArena());
}
inline std::string* PhoneNumberDesc::release_national_number_pattern() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.national_number_pattern_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.national_number_pattern_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PhoneNumberDesc::set_allocated_national_number_pattern(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.national_number_pattern_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.national_number_pattern_.IsDefault()) {
          _impl_.national_number_pattern_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
}

// repeated int32 possible_length = 9;
inline int PhoneNumberDesc::_internal_possible_length_size() const {
  return _internal_possible_length().size();
}
inline int PhoneNumberDesc::possible_length_size() const {
  return _internal_possible_length_size();
}
inline void PhoneNumberDesc::clear_possible_length() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.possible_length_.Clear();
}
inline ::int32_t PhoneNumberDesc::possible_length(int index) const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumberDesc.possible_length)
  return _internal_possible_length().Get(index);
}
inline void PhoneNumberDesc::set_possible_length(int index, ::int32_t value) {
  _internal_mutable_possible_length()->Set(index, value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumberDesc.possible_length)
}
inline void PhoneNumberDesc::add_possible_length(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_possible_length()->Add(value);
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.PhoneNumberDesc.possible_length)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& PhoneNumberDesc::possible_length() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.PhoneNumberDesc.possible_length)
  return _internal_possible_length();
}
inline ::google::protobuf::RepeatedField<::int32_t>* PhoneNumberDesc::mutable_possible_length()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PhoneNumberDesc.possible_length)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_possible_length();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& PhoneNumberDesc::_internal_possible_length()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.possible_length_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* PhoneNumberDesc::_internal_mutable_possible_length() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.possible_length_;
}

// repeated int32 possible_length_local_only = 10;
inline int PhoneNumberDesc::_internal_possible_length_local_only_size() const {
  return _internal_possible_length_local_only().size();
}
inline int PhoneNumberDesc::possible_length_local_only_size() const {
  return _internal_possible_length_local_only_size();
}
inline void PhoneNumberDesc::clear_possible_length_local_only() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.possible_length_local_only_.Clear();
}
inline ::int32_t PhoneNumberDesc::possible_length_local_only(int index) const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumberDesc.possible_length_local_only)
  return _internal_possible_length_local_only().Get(index);
}
inline void PhoneNumberDesc::set_possible_length_local_only(int index, ::int32_t value) {
  _internal_mutable_possible_length_local_only()->Set(index, value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumberDesc.possible_length_local_only)
}
inline void PhoneNumberDesc::add_possible_length_local_only(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_possible_length_local_only()->Add(value);
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.PhoneNumberDesc.possible_length_local_only)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& PhoneNumberDesc::possible_length_local_only() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.PhoneNumberDesc.possible_length_local_only)
  return _internal_possible_length_local_only();
}
inline ::google::protobuf::RepeatedField<::int32_t>* PhoneNumberDesc::mutable_possible_length_local_only()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PhoneNumberDesc.possible_length_local_only)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_possible_length_local_only();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& PhoneNumberDesc::_internal_possible_length_local_only()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.possible_length_local_only_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* PhoneNumberDesc::_internal_mutable_possible_length_local_only() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.possible_length_local_only_;
}

// optional string example_number = 6;
inline bool PhoneNumberDesc::has_example_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PhoneNumberDesc::clear_example_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.example_number_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PhoneNumberDesc::example_number() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumberDesc.example_number)
  return _internal_example_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PhoneNumberDesc::set_example_number(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.example_number_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumberDesc.example_number)
}
inline std::string* PhoneNumberDesc::mutable_example_number() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_example_number();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumberDesc.example_number)
  return _s;
}
inline const std::string& PhoneNumberDesc::_internal_example_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.example_number_.Get();
}
inline void PhoneNumberDesc::_internal_set_example_number(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.example_number_.Set(value, GetArena());
}
inline std::string* PhoneNumberDesc::_internal_mutable_example_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.example_number_.Mutable( GetArena());
}
inline std::string* PhoneNumberDesc::release_example_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumberDesc.example_number)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.example_number_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.example_number_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PhoneNumberDesc::set_allocated_example_number(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.example_number_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.example_number_.IsDefault()) {
          _impl_.example_number_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumberDesc.example_number)
}

// -------------------------------------------------------------------

// PhoneMetadata

// optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
inline bool PhoneMetadata::has_general_desc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.general_desc_ != nullptr);
  return value;
}
inline void PhoneMetadata::clear_general_desc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.general_desc_ != nullptr) _impl_.general_desc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_general_desc() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::PhoneNumberDesc* p = _impl_.general_desc_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::general_desc() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.general_desc)
  return _internal_general_desc();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_general_desc(::i18n::phonenumbers::PhoneNumberDesc* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.general_desc_);
  }
  _impl_.general_desc_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.general_desc)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_general_desc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::i18n::phonenumbers::PhoneNumberDesc* released = _impl_.general_desc_;
  _impl_.general_desc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_general_desc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.general_desc)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = _impl_.general_desc_;
  _impl_.general_desc_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_general_desc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.general_desc_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArena());
    _impl_.general_desc_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(p);
  }
  return _impl_.general_desc_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_general_desc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_general_desc();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.general_desc)
  return _msg;
}
inline void PhoneMetadata::set_allocated_general_desc(::i18n::phonenumbers::PhoneNumberDesc* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(_impl_.general_desc_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.general_desc_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.general_desc)
}

// optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
inline bool PhoneMetadata::has_fixed_line() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fixed_line_ != nullptr);
  return value;
}
inline void PhoneMetadata::clear_fixed_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.fixed_line_ != nullptr) _impl_.fixed_line_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_fixed_line() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::PhoneNumberDesc* p = _impl_.fixed_line_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::fixed_line() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.fixed_line)
  return _internal_fixed_line();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_fixed_line(::i18n::phonenumbers::PhoneNumberDesc* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fixed_line_);
  }
  _impl_.fixed_line_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.fixed_line)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_fixed_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::i18n::phonenumbers::PhoneNumberDesc* released = _impl_.fixed_line_;
  _impl_.fixed_line_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_fixed_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.fixed_line)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = _impl_.fixed_line_;
  _impl_.fixed_line_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_fixed_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.fixed_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArena());
    _impl_.fixed_line_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(p);
  }
  return _impl_.fixed_line_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_fixed_line() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_fixed_line();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.fixed_line)
  return _msg;
}
inline void PhoneMetadata::set_allocated_fixed_line(::i18n::phonenumbers::PhoneNumberDesc* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(_impl_.fixed_line_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.fixed_line_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.fixed_line)
}

// optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
inline bool PhoneMetadata::has_mobile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mobile_ != nullptr);
  return value;
}
inline void PhoneMetadata::clear_mobile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.mobile_ != nullptr) _impl_.mobile_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_mobile() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::PhoneNumberDesc* p = _impl_.mobile_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::mobile() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.mobile)
  return _internal_mobile();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_mobile(::i18n::phonenumbers::PhoneNumberDesc* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mobile_);
  }
  _impl_.mobile_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.mobile)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_mobile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::i18n::phonenumbers::PhoneNumberDesc* released = _impl_.mobile_;
  _impl_.mobile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_mobile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.mobile)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = _impl_.mobile_;
  _impl_.mobile_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_mobile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.mobile_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArena());
    _impl_.mobile_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(p);
  }
  return _impl_.mobile_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_mobile() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_mobile();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.mobile)
  return _msg;
}
inline void PhoneMetadata::set_allocated_mobile(::i18n::phonenumbers::PhoneNumberDesc* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(_impl_.mobile_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.mobile_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.mobile)
}

// optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
inline bool PhoneMetadata::has_toll_free() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.toll_free_ != nullptr);
  return value;
}
inline void PhoneMetadata::clear_toll_free() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.toll_free_ != nullptr) _impl_.toll_free_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_toll_free() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::PhoneNumberDesc* p = _impl_.toll_free_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::toll_free() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.toll_free)
  return _internal_toll_free();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_toll_free(::i18n::phonenumbers::PhoneNumberDesc* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.toll_free_);
  }
  _impl_.toll_free_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.toll_free)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_toll_free() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::i18n::phonenumbers::PhoneNumberDesc* released = _impl_.toll_free_;
  _impl_.toll_free_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_toll_free() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.toll_free)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = _impl_.toll_free_;
  _impl_.toll_free_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_toll_free() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.toll_free_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArena());
    _impl_.toll_free_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(p);
  }
  return _impl_.toll_free_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_toll_free() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_toll_free();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.toll_free)
  return _msg;
}
inline void PhoneMetadata::set_allocated_toll_free(::i18n::phonenumbers::PhoneNumberDesc* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(_impl_.toll_free_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.toll_free_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.toll_free)
}

// optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
inline bool PhoneMetadata::has_premium_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.premium_rate_ != nullptr);
  return value;
}
inline void PhoneMetadata::clear_premium_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.premium_rate_ != nullptr) _impl_.premium_rate_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_premium_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::PhoneNumberDesc* p = _impl_.premium_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::premium_rate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.premium_rate)
  return _internal_premium_rate();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_premium_rate(::i18n::phonenumbers::PhoneNumberDesc* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.premium_rate_);
  }
  _impl_.premium_rate_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.premium_rate)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_premium_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::i18n::phonenumbers::PhoneNumberDesc* released = _impl_.premium_rate_;
  _impl_.premium_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_premium_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.premium_rate)

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = _impl_.premium_rate_;
  _impl_.premium_rate_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_premium_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.premium_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArena());
    _impl_.premium_rate_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(p);
  }
  return _impl_.premium_rate_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_premium_rate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_premium_rate();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.premium_rate)
  return _msg;
}
inline void PhoneMetadata::set_allocated_premium_rate(::i18n::phonenumbers::PhoneNumberDesc* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(_impl_.premium_rate_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }

  _impl_.premium_rate_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.premium_rate)
}

// optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
inline bool PhoneMetadata::has_shared_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shared_cost_ != nullptr);
  return value;
}
inline void PhoneMetadata::clear_shared_cost() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.shared_cost_ != nullptr) _impl_.shared_cost_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_shared_cost() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::PhoneNumberDesc* p = _impl_.shared_cost_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::shared_cost() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.shared_cost)
  return _internal_shared_cost();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_shared_cost(::i18n::phonenumbers::PhoneNumberDesc* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shared_cost_);
  }
  _impl_.shared_cost_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.shared_cost)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_shared_cost() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::i18n::phonenumbers::PhoneNumberDesc* released = _impl_.shared_cost_;
  _impl_.shared_cost_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_shared_cost() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.shared_cost)

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = _impl_.shared_cost_;
  _impl_.shared_cost_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_shared_cost() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.shared_cost_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArena());
    _impl_.shared_cost_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(p);
  }
  return _impl_.shared_cost_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_shared_cost() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_shared_cost();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.shared_cost)
  return _msg;
}
inline void PhoneMetadata::set_allocated_shared_cost(::i18n::phonenumbers::PhoneNumberDesc* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(_impl_.shared_cost_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }

  _impl_.shared_cost_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.shared_cost)
}

// optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
inline bool PhoneMetadata::has_personal_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.personal_number_ != nullptr);
  return value;
}
inline void PhoneMetadata::clear_personal_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.personal_number_ != nullptr) _impl_.personal_number_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_personal_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::PhoneNumberDesc* p = _impl_.personal_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::personal_number() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.personal_number)
  return _internal_personal_number();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_personal_number(::i18n::phonenumbers::PhoneNumberDesc* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.personal_number_);
  }
  _impl_.personal_number_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.personal_number)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_personal_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::i18n::phonenumbers::PhoneNumberDesc* released = _impl_.personal_number_;
  _impl_.personal_number_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_personal_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.personal_number)

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = _impl_.personal_number_;
  _impl_.personal_number_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_personal_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.personal_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArena());
    _impl_.personal_number_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(p);
  }
  return _impl_.personal_number_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_personal_number() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_personal_number();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.personal_number)
  return _msg;
}
inline void PhoneMetadata::set_allocated_personal_number(::i18n::phonenumbers::PhoneNumberDesc* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(_impl_.personal_number_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }

  _impl_.personal_number_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.personal_number)
}

// optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
inline bool PhoneMetadata::has_voip() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voip_ != nullptr);
  return value;
}
inline void PhoneMetadata::clear_voip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.voip_ != nullptr) _impl_.voip_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_voip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::PhoneNumberDesc* p = _impl_.voip_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::voip() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.voip)
  return _internal_voip();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_voip(::i18n::phonenumbers::PhoneNumberDesc* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voip_);
  }
  _impl_.voip_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.voip)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_voip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::i18n::phonenumbers::PhoneNumberDesc* released = _impl_.voip_;
  _impl_.voip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_voip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.voip)

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = _impl_.voip_;
  _impl_.voip_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_voip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.voip_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArena());
    _impl_.voip_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(p);
  }
  return _impl_.voip_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_voip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_voip();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.voip)
  return _msg;
}
inline void PhoneMetadata::set_allocated_voip(::i18n::phonenumbers::PhoneNumberDesc* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(_impl_.voip_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }

  _impl_.voip_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.voip)
}

// optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
inline bool PhoneMetadata::has_pager() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pager_ != nullptr);
  return value;
}
inline void PhoneMetadata::clear_pager() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.pager_ != nullptr) _impl_.pager_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_pager() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::PhoneNumberDesc* p = _impl_.pager_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::pager() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.pager)
  return _internal_pager();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_pager(::i18n::phonenumbers::PhoneNumberDesc* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pager_);
  }
  _impl_.pager_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.pager)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_pager() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00010000u;
  ::i18n::phonenumbers::PhoneNumberDesc* released = _impl_.pager_;
  _impl_.pager_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_pager() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.pager)

  _impl_._has_bits_[0] &= ~0x00010000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = _impl_.pager_;
  _impl_.pager_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_pager() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.pager_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArena());
    _impl_.pager_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(p);
  }
  return _impl_.pager_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_pager() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_pager();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.pager)
  return _msg;
}
inline void PhoneMetadata::set_allocated_pager(::i18n::phonenumbers::PhoneNumberDesc* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(_impl_.pager_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }

  _impl_.pager_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.pager)
}

// optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
inline bool PhoneMetadata::has_uan() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uan_ != nullptr);
  return value;
}
inline void PhoneMetadata::clear_uan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.uan_ != nullptr) _impl_.uan_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_uan() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::PhoneNumberDesc* p = _impl_.uan_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::uan() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.uan)
  return _internal_uan();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_uan(::i18n::phonenumbers::PhoneNumberDesc* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.uan_);
  }
  _impl_.uan_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.uan)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_uan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00040000u;
  ::i18n::phonenumbers::PhoneNumberDesc* released = _impl_.uan_;
  _impl_.uan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_uan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.uan)

  _impl_._has_bits_[0] &= ~0x00040000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = _impl_.uan_;
  _impl_.uan_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_uan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.uan_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArena());
    _impl_.uan_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(p);
  }
  return _impl_.uan_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_uan() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_uan();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.uan)
  return _msg;
}
inline void PhoneMetadata::set_allocated_uan(::i18n::phonenumbers::PhoneNumberDesc* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(_impl_.uan_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }

  _impl_.uan_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.uan)
}

// optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
inline bool PhoneMetadata::has_emergency() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.emergency_ != nullptr);
  return value;
}
inline void PhoneMetadata::clear_emergency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.emergency_ != nullptr) _impl_.emergency_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_emergency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::PhoneNumberDesc* p = _impl_.emergency_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::emergency() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.emergency)
  return _internal_emergency();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_emergency(::i18n::phonenumbers::PhoneNumberDesc* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.emergency_);
  }
  _impl_.emergency_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.emergency)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_emergency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00080000u;
  ::i18n::phonenumbers::PhoneNumberDesc* released = _impl_.emergency_;
  _impl_.emergency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_emergency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.emergency)

  _impl_._has_bits_[0] &= ~0x00080000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = _impl_.emergency_;
  _impl_.emergency_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_emergency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00080000u;
  if (_impl_.emergency_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArena());
    _impl_.emergency_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(p);
  }
  return _impl_.emergency_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_emergency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_emergency();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.emergency)
  return _msg;
}
inline void PhoneMetadata::set_allocated_emergency(::i18n::phonenumbers::PhoneNumberDesc* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(_impl_.emergency_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }

  _impl_.emergency_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.emergency)
}

// optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
inline bool PhoneMetadata::has_voicemail() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voicemail_ != nullptr);
  return value;
}
inline void PhoneMetadata::clear_voicemail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.voicemail_ != nullptr) _impl_.voicemail_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_voicemail() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::PhoneNumberDesc* p = _impl_.voicemail_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::voicemail() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.voicemail)
  return _internal_voicemail();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_voicemail(::i18n::phonenumbers::PhoneNumberDesc* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voicemail_);
  }
  _impl_.voicemail_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.voicemail)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_voicemail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00100000u;
  ::i18n::phonenumbers::PhoneNumberDesc* released = _impl_.voicemail_;
  _impl_.voicemail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_voicemail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.voicemail)

  _impl_._has_bits_[0] &= ~0x00100000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = _impl_.voicemail_;
  _impl_.voicemail_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_voicemail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00100000u;
  if (_impl_.voicemail_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArena());
    _impl_.voicemail_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(p);
  }
  return _impl_.voicemail_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_voicemail() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_voicemail();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.voicemail)
  return _msg;
}
inline void PhoneMetadata::set_allocated_voicemail(::i18n::phonenumbers::PhoneNumberDesc* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(_impl_.voicemail_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }

  _impl_.voicemail_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.voicemail)
}

// optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
inline bool PhoneMetadata::has_short_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.short_code_ != nullptr);
  return value;
}
inline void PhoneMetadata::clear_short_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.short_code_ != nullptr) _impl_.short_code_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_short_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::PhoneNumberDesc* p = _impl_.short_code_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::short_code() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.short_code)
  return _internal_short_code();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_short_code(::i18n::phonenumbers::PhoneNumberDesc* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.short_code_);
  }
  _impl_.short_code_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.short_code)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_short_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00200000u;
  ::i18n::phonenumbers::PhoneNumberDesc* released = _impl_.short_code_;
  _impl_.short_code_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_short_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.short_code)

  _impl_._has_bits_[0] &= ~0x00200000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = _impl_.short_code_;
  _impl_.short_code_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_short_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00200000u;
  if (_impl_.short_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArena());
    _impl_.short_code_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(p);
  }
  return _impl_.short_code_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_short_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_short_code();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.short_code)
  return _msg;
}
inline void PhoneMetadata::set_allocated_short_code(::i18n::phonenumbers::PhoneNumberDesc* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(_impl_.short_code_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }

  _impl_.short_code_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.short_code)
}

// optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
inline bool PhoneMetadata::has_standard_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.standard_rate_ != nullptr);
  return value;
}
inline void PhoneMetadata::clear_standard_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.standard_rate_ != nullptr) _impl_.standard_rate_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_standard_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::PhoneNumberDesc* p = _impl_.standard_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::standard_rate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.standard_rate)
  return _internal_standard_rate();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_standard_rate(::i18n::phonenumbers::PhoneNumberDesc* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.standard_rate_);
  }
  _impl_.standard_rate_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.standard_rate)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_standard_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00400000u;
  ::i18n::phonenumbers::PhoneNumberDesc* released = _impl_.standard_rate_;
  _impl_.standard_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_standard_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.standard_rate)

  _impl_._has_bits_[0] &= ~0x00400000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = _impl_.standard_rate_;
  _impl_.standard_rate_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_standard_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00400000u;
  if (_impl_.standard_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArena());
    _impl_.standard_rate_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(p);
  }
  return _impl_.standard_rate_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_standard_rate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_standard_rate();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.standard_rate)
  return _msg;
}
inline void PhoneMetadata::set_allocated_standard_rate(::i18n::phonenumbers::PhoneNumberDesc* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(_impl_.standard_rate_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }

  _impl_.standard_rate_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.standard_rate)
}

// optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
inline bool PhoneMetadata::has_carrier_specific() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.carrier_specific_ != nullptr);
  return value;
}
inline void PhoneMetadata::clear_carrier_specific() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.carrier_specific_ != nullptr) _impl_.carrier_specific_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_carrier_specific() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::PhoneNumberDesc* p = _impl_.carrier_specific_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::carrier_specific() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.carrier_specific)
  return _internal_carrier_specific();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_carrier_specific(::i18n::phonenumbers::PhoneNumberDesc* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.carrier_specific_);
  }
  _impl_.carrier_specific_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.carrier_specific)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_carrier_specific() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00800000u;
  ::i18n::phonenumbers::PhoneNumberDesc* released = _impl_.carrier_specific_;
  _impl_.carrier_specific_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_carrier_specific() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.carrier_specific)

  _impl_._has_bits_[0] &= ~0x00800000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = _impl_.carrier_specific_;
  _impl_.carrier_specific_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_carrier_specific() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00800000u;
  if (_impl_.carrier_specific_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArena());
    _impl_.carrier_specific_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(p);
  }
  return _impl_.carrier_specific_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_carrier_specific() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_carrier_specific();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.carrier_specific)
  return _msg;
}
inline void PhoneMetadata::set_allocated_carrier_specific(::i18n::phonenumbers::PhoneNumberDesc* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(_impl_.carrier_specific_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }

  _impl_.carrier_specific_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.carrier_specific)
}

// optional .i18n.phonenumbers.PhoneNumberDesc sms_services = 33;
inline bool PhoneMetadata::has_sms_services() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sms_services_ != nullptr);
  return value;
}
inline void PhoneMetadata::clear_sms_services() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.sms_services_ != nullptr) _impl_.sms_services_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_sms_services() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::PhoneNumberDesc* p = _impl_.sms_services_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::sms_services() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.sms_services)
  return _internal_sms_services();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_sms_services(::i18n::phonenumbers::PhoneNumberDesc* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sms_services_);
  }
  _impl_.sms_services_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.sms_services)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_sms_services() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x01000000u;
  ::i18n::phonenumbers::PhoneNumberDesc* released = _impl_.sms_services_;
  _impl_.sms_services_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_sms_services() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.sms_services)

  _impl_._has_bits_[0] &= ~0x01000000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = _impl_.sms_services_;
  _impl_.sms_services_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_sms_services() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x01000000u;
  if (_impl_.sms_services_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArena());
    _impl_.sms_services_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(p);
  }
  return _impl_.sms_services_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_sms_services() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_sms_services();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.sms_services)
  return _msg;
}
inline void PhoneMetadata::set_allocated_sms_services(::i18n::phonenumbers::PhoneNumberDesc* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(_impl_.sms_services_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }

  _impl_.sms_services_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.sms_services)
}

// optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
inline bool PhoneMetadata::has_no_international_dialling() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.no_international_dialling_ != nullptr);
  return value;
}
inline void PhoneMetadata::clear_no_international_dialling() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.no_international_dialling_ != nullptr) _impl_.no_international_dialling_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_no_international_dialling() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::i18n::phonenumbers::PhoneNumberDesc* p = _impl_.no_international_dialling_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::no_international_dialling() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.no_international_dialling)
  return _internal_no_international_dialling();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_no_international_dialling(::i18n::phonenumbers::PhoneNumberDesc* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.no_international_dialling_);
  }
  _impl_.no_international_dialling_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.no_international_dialling)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_no_international_dialling() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00020000u;
  ::i18n::phonenumbers::PhoneNumberDesc* released = _impl_.no_international_dialling_;
  _impl_.no_international_dialling_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_no_international_dialling() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.no_international_dialling)

  _impl_._has_bits_[0] &= ~0x00020000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = _impl_.no_international_dialling_;
  _impl_.no_international_dialling_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_no_international_dialling() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.no_international_dialling_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArena());
    _impl_.no_international_dialling_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(p);
  }
  return _impl_.no_international_dialling_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_no_international_dialling() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_no_international_dialling();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.no_international_dialling)
  return _msg;
}
inline void PhoneMetadata::set_allocated_no_international_dialling(::i18n::phonenumbers::PhoneNumberDesc* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(_impl_.no_international_dialling_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }

  _impl_.no_international_dialling_ = reinterpret_cast<::i18n::phonenumbers::PhoneNumberDesc*>(value);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.no_international_dialling)
}

// required string id = 9;
inline bool PhoneMetadata::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PhoneMetadata::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PhoneMetadata::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PhoneMetadata::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.id)
}
inline std::string* PhoneMetadata::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.id)
  return _s;
}
inline const std::string& PhoneMetadata::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void PhoneMetadata::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* PhoneMetadata::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* PhoneMetadata::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PhoneMetadata::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.id)
}

// optional int32 country_code = 10;
inline bool PhoneMetadata::has_country_code() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void PhoneMetadata::clear_country_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_code_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::int32_t PhoneMetadata::country_code() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.country_code)
  return _internal_country_code();
}
inline void PhoneMetadata::set_country_code(::int32_t value) {
  _internal_set_country_code(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.country_code)
}
inline ::int32_t PhoneMetadata::_internal_country_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_code_;
}
inline void PhoneMetadata::_internal_set_country_code(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.country_code_ = value;
}

// optional string international_prefix = 11;
inline bool PhoneMetadata::has_international_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PhoneMetadata::clear_international_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.international_prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PhoneMetadata::international_prefix() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.international_prefix)
  return _internal_international_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PhoneMetadata::set_international_prefix(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.international_prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.international_prefix)
}
inline std::string* PhoneMetadata::mutable_international_prefix() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_international_prefix();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.international_prefix)
  return _s;
}
inline const std::string& PhoneMetadata::_internal_international_prefix() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.international_prefix_.Get();
}
inline void PhoneMetadata::_internal_set_international_prefix(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.international_prefix_.Set(value, GetArena());
}
inline std::string* PhoneMetadata::_internal_mutable_international_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.international_prefix_.Mutable( GetArena());
}
inline std::string* PhoneMetadata::release_international_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.international_prefix)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.international_prefix_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.international_prefix_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PhoneMetadata::set_allocated_international_prefix(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.international_prefix_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.international_prefix_.IsDefault()) {
          _impl_.international_prefix_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.international_prefix)
}

// optional string preferred_international_prefix = 17;
inline bool PhoneMetadata::has_preferred_international_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void PhoneMetadata::clear_preferred_international_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.preferred_international_prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& PhoneMetadata::preferred_international_prefix() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
  return _internal_preferred_international_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PhoneMetadata::set_preferred_international_prefix(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.preferred_international_prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
}
inline std::string* PhoneMetadata::mutable_preferred_international_prefix() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_preferred_international_prefix();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
  return _s;
}
inline const std::string& PhoneMetadata::_internal_preferred_international_prefix() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.preferred_international_prefix_.Get();
}
inline void PhoneMetadata::_internal_set_preferred_international_prefix(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.preferred_international_prefix_.Set(value, GetArena());
}
inline std::string* PhoneMetadata::_internal_mutable_preferred_international_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.preferred_international_prefix_.Mutable( GetArena());
}
inline std::string* PhoneMetadata::release_preferred_international_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.preferred_international_prefix_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.preferred_international_prefix_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PhoneMetadata::set_allocated_preferred_international_prefix(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.preferred_international_prefix_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.preferred_international_prefix_.IsDefault()) {
          _impl_.preferred_international_prefix_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
}

// optional string national_prefix = 12;
inline bool PhoneMetadata::has_national_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PhoneMetadata::clear_national_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.national_prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PhoneMetadata::national_prefix() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.national_prefix)
  return _internal_national_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PhoneMetadata::set_national_prefix(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.national_prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.national_prefix)
}
inline std::string* PhoneMetadata::mutable_national_prefix() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_national_prefix();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.national_prefix)
  return _s;
}
inline const std::string& PhoneMetadata::_internal_national_prefix() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.national_prefix_.Get();
}
inline void PhoneMetadata::_internal_set_national_prefix(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.national_prefix_.Set(value, GetArena());
}
inline std::string* PhoneMetadata::_internal_mutable_national_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.national_prefix_.Mutable( GetArena());
}
inline std::string* PhoneMetadata::release_national_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.national_prefix)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.national_prefix_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.national_prefix_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PhoneMetadata::set_allocated_national_prefix(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.national_prefix_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.national_prefix_.IsDefault()) {
          _impl_.national_prefix_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.national_prefix)
}

// optional string preferred_extn_prefix = 13;
inline bool PhoneMetadata::has_preferred_extn_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PhoneMetadata::clear_preferred_extn_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.preferred_extn_prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PhoneMetadata::preferred_extn_prefix() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
  return _internal_preferred_extn_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PhoneMetadata::set_preferred_extn_prefix(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.preferred_extn_prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
}
inline std::string* PhoneMetadata::mutable_preferred_extn_prefix() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_preferred_extn_prefix();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
  return _s;
}
inline const std::string& PhoneMetadata::_internal_preferred_extn_prefix() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.preferred_extn_prefix_.Get();
}
inline void PhoneMetadata::_internal_set_preferred_extn_prefix(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.preferred_extn_prefix_.Set(value, GetArena());
}
inline std::string* PhoneMetadata::_internal_mutable_preferred_extn_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.preferred_extn_prefix_.Mutable( GetArena());
}
inline std::string* PhoneMetadata::release_preferred_extn_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.preferred_extn_prefix_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.preferred_extn_prefix_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PhoneMetadata::set_allocated_preferred_extn_prefix(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.preferred_extn_prefix_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.preferred_extn_prefix_.IsDefault()) {
          _impl_.preferred_extn_prefix_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
}

// optional string national_prefix_for_parsing = 15;
inline bool PhoneMetadata::has_national_prefix_for_parsing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void PhoneMetadata::clear_national_prefix_for_parsing() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.national_prefix_for_parsing_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PhoneMetadata::national_prefix_for_parsing() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
  return _internal_national_prefix_for_parsing();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PhoneMetadata::set_national_prefix_for_parsing(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.national_prefix_for_parsing_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
}
inline std::string* PhoneMetadata::mutable_national_prefix_for_parsing() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_national_prefix_for_parsing();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
  return _s;
}
inline const std::string& PhoneMetadata::_internal_national_prefix_for_parsing() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.national_prefix_for_parsing_.Get();
}
inline void PhoneMetadata::_internal_set_national_prefix_for_parsing(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.national_prefix_for_parsing_.Set(value, GetArena());
}
inline std::string* PhoneMetadata::_internal_mutable_national_prefix_for_parsing() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.national_prefix_for_parsing_.Mutable( GetArena());
}
inline std::string* PhoneMetadata::release_national_prefix_for_parsing() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.national_prefix_for_parsing_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.national_prefix_for_parsing_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PhoneMetadata::set_allocated_national_prefix_for_parsing(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.national_prefix_for_parsing_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.national_prefix_for_parsing_.IsDefault()) {
          _impl_.national_prefix_for_parsing_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
}

// optional string national_prefix_transform_rule = 16;
inline bool PhoneMetadata::has_national_prefix_transform_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void PhoneMetadata::clear_national_prefix_transform_rule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.national_prefix_transform_rule_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PhoneMetadata::national_prefix_transform_rule() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
  return _internal_national_prefix_transform_rule();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PhoneMetadata::set_national_prefix_transform_rule(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.national_prefix_transform_rule_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
}
inline std::string* PhoneMetadata::mutable_national_prefix_transform_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_national_prefix_transform_rule();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
  return _s;
}
inline const std::string& PhoneMetadata::_internal_national_prefix_transform_rule() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.national_prefix_transform_rule_.Get();
}
inline void PhoneMetadata::_internal_set_national_prefix_transform_rule(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.national_prefix_transform_rule_.Set(value, GetArena());
}
inline std::string* PhoneMetadata::_internal_mutable_national_prefix_transform_rule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.national_prefix_transform_rule_.Mutable( GetArena());
}
inline std::string* PhoneMetadata::release_national_prefix_transform_rule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.national_prefix_transform_rule_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.national_prefix_transform_rule_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PhoneMetadata::set_allocated_national_prefix_transform_rule(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.national_prefix_transform_rule_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.national_prefix_transform_rule_.IsDefault()) {
          _impl_.national_prefix_transform_rule_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
}

// optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
inline bool PhoneMetadata::has_same_mobile_and_fixed_line_pattern() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void PhoneMetadata::clear_same_mobile_and_fixed_line_pattern() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.same_mobile_and_fixed_line_pattern_ = false;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline bool PhoneMetadata::same_mobile_and_fixed_line_pattern() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.same_mobile_and_fixed_line_pattern)
  return _internal_same_mobile_and_fixed_line_pattern();
}
inline void PhoneMetadata::set_same_mobile_and_fixed_line_pattern(bool value) {
  _internal_set_same_mobile_and_fixed_line_pattern(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.same_mobile_and_fixed_line_pattern)
}
inline bool PhoneMetadata::_internal_same_mobile_and_fixed_line_pattern() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.same_mobile_and_fixed_line_pattern_;
}
inline void PhoneMetadata::_internal_set_same_mobile_and_fixed_line_pattern(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.same_mobile_and_fixed_line_pattern_ = value;
}

// repeated .i18n.phonenumbers.NumberFormat number_format = 19;
inline int PhoneMetadata::_internal_number_format_size() const {
  return _internal_number_format().size();
}
inline int PhoneMetadata::number_format_size() const {
  return _internal_number_format_size();
}
inline void PhoneMetadata::clear_number_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.number_format_.Clear();
}
inline ::i18n::phonenumbers::NumberFormat* PhoneMetadata::mutable_number_format(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.number_format)
  return _internal_mutable_number_format()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::NumberFormat>* PhoneMetadata::mutable_number_format()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PhoneMetadata.number_format)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_number_format();
}
inline const ::i18n::phonenumbers::NumberFormat& PhoneMetadata::number_format(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.number_format)
  return _internal_number_format().Get(index);
}
inline ::i18n::phonenumbers::NumberFormat* PhoneMetadata::add_number_format() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::i18n::phonenumbers::NumberFormat* _add = _internal_mutable_number_format()->Add();
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.PhoneMetadata.number_format)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::NumberFormat>& PhoneMetadata::number_format() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.PhoneMetadata.number_format)
  return _internal_number_format();
}
inline const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::NumberFormat>&
PhoneMetadata::_internal_number_format() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.number_format_;
}
inline ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::NumberFormat>*
PhoneMetadata::_internal_mutable_number_format() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.number_format_;
}

// repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
inline int PhoneMetadata::_internal_intl_number_format_size() const {
  return _internal_intl_number_format().size();
}
inline int PhoneMetadata::intl_number_format_size() const {
  return _internal_intl_number_format_size();
}
inline void PhoneMetadata::clear_intl_number_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.intl_number_format_.Clear();
}
inline ::i18n::phonenumbers::NumberFormat* PhoneMetadata::mutable_intl_number_format(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.intl_number_format)
  return _internal_mutable_intl_number_format()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::NumberFormat>* PhoneMetadata::mutable_intl_number_format()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PhoneMetadata.intl_number_format)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_intl_number_format();
}
inline const ::i18n::phonenumbers::NumberFormat& PhoneMetadata::intl_number_format(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.intl_number_format)
  return _internal_intl_number_format().Get(index);
}
inline ::i18n::phonenumbers::NumberFormat* PhoneMetadata::add_intl_number_format() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::i18n::phonenumbers::NumberFormat* _add = _internal_mutable_intl_number_format()->Add();
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.PhoneMetadata.intl_number_format)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::NumberFormat>& PhoneMetadata::intl_number_format() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.PhoneMetadata.intl_number_format)
  return _internal_intl_number_format();
}
inline const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::NumberFormat>&
PhoneMetadata::_internal_intl_number_format() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.intl_number_format_;
}
inline ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::NumberFormat>*
PhoneMetadata::_internal_mutable_intl_number_format() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.intl_number_format_;
}

// optional bool main_country_for_code = 22 [default = false];
inline bool PhoneMetadata::has_main_country_for_code() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void PhoneMetadata::clear_main_country_for_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.main_country_for_code_ = false;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline bool PhoneMetadata::main_country_for_code() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.main_country_for_code)
  return _internal_main_country_for_code();
}
inline void PhoneMetadata::set_main_country_for_code(bool value) {
  _internal_set_main_country_for_code(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.main_country_for_code)
}
inline bool PhoneMetadata::_internal_main_country_for_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.main_country_for_code_;
}
inline void PhoneMetadata::_internal_set_main_country_for_code(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.main_country_for_code_ = value;
}

// optional string leading_digits = 23;
inline bool PhoneMetadata::has_leading_digits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void PhoneMetadata::clear_leading_digits() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leading_digits_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& PhoneMetadata::leading_digits() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.leading_digits)
  return _internal_leading_digits();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PhoneMetadata::set_leading_digits(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.leading_digits_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.leading_digits)
}
inline std::string* PhoneMetadata::mutable_leading_digits() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_leading_digits();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.leading_digits)
  return _s;
}
inline const std::string& PhoneMetadata::_internal_leading_digits() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.leading_digits_.Get();
}
inline void PhoneMetadata::_internal_set_leading_digits(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.leading_digits_.Set(value, GetArena());
}
inline std::string* PhoneMetadata::_internal_mutable_leading_digits() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.leading_digits_.Mutable( GetArena());
}
inline std::string* PhoneMetadata::release_leading_digits() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.leading_digits)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.leading_digits_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.leading_digits_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PhoneMetadata::set_allocated_leading_digits(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.leading_digits_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.leading_digits_.IsDefault()) {
          _impl_.leading_digits_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.leading_digits)
}

// optional bool mobile_number_portable_region = 32 [default = false];
inline bool PhoneMetadata::has_mobile_number_portable_region() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void PhoneMetadata::clear_mobile_number_portable_region() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mobile_number_portable_region_ = false;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline bool PhoneMetadata::mobile_number_portable_region() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.mobile_number_portable_region)
  return _internal_mobile_number_portable_region();
}
inline void PhoneMetadata::set_mobile_number_portable_region(bool value) {
  _internal_set_mobile_number_portable_region(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.mobile_number_portable_region)
}
inline bool PhoneMetadata::_internal_mobile_number_portable_region() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mobile_number_portable_region_;
}
inline void PhoneMetadata::_internal_set_mobile_number_portable_region(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.mobile_number_portable_region_ = value;
}

// -------------------------------------------------------------------

// PhoneMetadataCollection

// repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
inline int PhoneMetadataCollection::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int PhoneMetadataCollection::metadata_size() const {
  return _internal_metadata_size();
}
inline void PhoneMetadataCollection::clear_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metadata_.Clear();
}
inline ::i18n::phonenumbers::PhoneMetadata* PhoneMetadataCollection::mutable_metadata(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadataCollection.metadata)
  return _internal_mutable_metadata()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::PhoneMetadata>* PhoneMetadataCollection::mutable_metadata()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PhoneMetadataCollection.metadata)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_metadata();
}
inline const ::i18n::phonenumbers::PhoneMetadata& PhoneMetadataCollection::metadata(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadataCollection.metadata)
  return _internal_metadata().Get(index);
}
inline ::i18n::phonenumbers::PhoneMetadata* PhoneMetadataCollection::add_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::i18n::phonenumbers::PhoneMetadata* _add = _internal_mutable_metadata()->Add();
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.PhoneMetadataCollection.metadata)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::PhoneMetadata>& PhoneMetadataCollection::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.PhoneMetadataCollection.metadata)
  return _internal_metadata();
}
inline const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::PhoneMetadata>&
PhoneMetadataCollection::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_;
}
inline ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::PhoneMetadata>*
PhoneMetadataCollection::_internal_mutable_metadata() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.metadata_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace phonenumbers
}  // namespace i18n


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_phonemetadata_2eproto_2epb_2eh
